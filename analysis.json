{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Events based access to projects datastore.\n\nNote: **All events must be cancelable.** When the event is cancelled by an\ninstance of the element it won't be handled again by other instance that\npossibly exists in the DOM.\n\nCancellable event is a request to models for change. Non-cancellable event\nis a notification for views to update their values.\nFor example `project-object-changed` event notifies model to update object in\nthe datastore if the event is cancelable and to update views if it's not\ncancellable.\n\nEach handled event contains the `result` property on the `detail` object. It\ncontains a `Promise` object with a result of the operation. Also, for update\n/ delete events the same non-cancelable event is fired.\n\nEvents handled by this element are cancelled and propagation of the event is\nstopped.\n\nSee model description here:\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/docs/\narc-models.md#arcproject\n\nSupported operations:\n\n-   Read project object (`project-read`)\n-   Update name only (`project-name-changed`)\n-   Update project object (`project-object-changed`)\n-   Delete object (`project-object-deleted`)\n-   Query for projects (`project-model-query`)\n\n### Events description\n\n#### `project-read` event\n\nReads a project object from the datastore.\n\n##### Properties\n-   `id` (String, required) ID of the datastore entry\n-   `rev` (String, optional) Specific revision to retrieve from the datastore.\nLatest by default.\n\n##### Example\n\n```javascript\nvar event = new CustomEvent('project-read', {\n   detail: { id: 'some-id' },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(project => console.log(project));\n}\n```\n\n#### `project-object-changed` event\n\nUpdates / saves new object in the datastore.\n\n##### Properties\n\n-   `project` (Object, required) An object to store\n\n##### Example\n\n```javascript\nvar event = new CustomEvent('project-object-changed', {\n   detail: { project: {...} },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(project => console.log(project));\n}\n```\n\n#### `project-object-deleted` event\n\nDeletes the object from the datastore. This operation fires\n`project-object-deleted` custom event. Promise returns object's\nnew `_rev` value.\n\n##### Properties\n-   `id` (String, required) ID of the datastore entry\n-   `rev` (String, optional) The `_rev` property of the PouchDB datastore\nobject. If not set it will use latest revision.\n\n##### Example\n\n```javascript\nvar event = new CustomEvent('project-object-deleted', {\n   detail: { id: 'some-id' },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(newRev => console.log(newRev));\n}\n```\n\n#### `project-model-query` event\n\nReads the list of all projects. Promise resolves to the list of projects.\nThis event doesn't requeire any properties but **the `details` object must be set**.\n\n##### Properties\n\n-   `ids` (Array<String>, optional) If present it only returns data for\nids passed in this array. If the data does not exists in the store anymore\nthis item is `undefined` in the response.\n\n##### Example\n\n```javascript\nvar event = new CustomEvent('project-model-query', {\n   detail: {}, // THIS MUST BE SET\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(list => console.log(list));\n}\n```\n\n#### `project-update-bulk` event\n\nUsed to create / update projects in bulk\n\nIt expects `projects` property to be set on the detail object.\nEach item must be an object at least containing the name. Otherwise the\nobject is ignored.\n\n##### Example\n\n```javascript\nvar event = new CustomEvent('project-update-bulk', {\n   detail: {\n     projects: [{name: 'my project'}]\n   },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(list => console.log(list));\n}\n```",
      "summary": "",
      "path": "project-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "savedDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "historyDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "projectDb",
          "type": "PouchDB",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 201,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 2
            },
            "end": {
              "line": 213,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 2
            },
            "end": {
              "line": 417,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "getDatabase",
          "description": "Returns a reference to a PouchDB database instance for given type.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "PouchDB",
            "desc": "PouchDB instance for the datastore."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "readProject",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 90,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest\nrevision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "updateProject",
          "description": "Updates / saves a project object in the datastore.\nThis function fires `project-object-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "project",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "removeProject",
          "description": "Removed an object from the datastore.\nThis function fires `project-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 126,
              "column": 2
            },
            "end": {
              "line": 145,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "_handleRead",
          "description": "Handler for project read event request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 2
            },
            "end": {
              "line": 233,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createBulkHandler",
          "description": "Handler for `project-update-bulk` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 2
            },
            "end": {
              "line": 250,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_normalizeProjects",
          "description": "Normalizes projects list to common model.\nIt updates `updated` property to current time.\nIf an item is not an object then it is removed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 259,
              "column": 2
            },
            "end": {
              "line": 277,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "projects",
              "type": "Array.<Object>",
              "description": "List of projects."
            }
          ],
          "return": {
            "type": "Array.<Object>"
          }
        },
        {
          "name": "updateBulk",
          "description": "Updates more than one project in a bulk request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 2
            },
            "end": {
              "line": 287,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "projects",
              "type": "Array.<Object>",
              "description": "List of requests to update."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_processUpdateBulkResponse",
          "description": "Processes datastore response after calling `updateBulk()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 2
            },
            "end": {
              "line": 314,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "projects",
              "type": "Array.<Object>",
              "description": "List of requests to update."
            },
            {
              "name": "response",
              "type": "Array.<Object>",
              "description": "PouchDB response"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "List of projects with updated `_id` and `_rew`"
          }
        },
        {
          "name": "listProjects",
          "description": "Lists all project objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 2
            },
            "end": {
              "line": 333,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ids",
              "type": "?Array.<String>",
              "description": "Optional, list of project IDs to limit the\nresponse to"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved to a list of projects."
          }
        },
        {
          "name": "_handleObjectSave",
          "description": "Handles object save / update",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 338,
              "column": 2
            },
            "end": {
              "line": 371,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectDelete",
          "description": "Deletes the object from the datastore.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 376,
              "column": 2
            },
            "end": {
              "line": 390,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_queryHandler",
          "description": "Queries for a list of projects.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 395,
              "column": 2
            },
            "end": {
              "line": 406,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 178,
          "column": 0
        },
        "end": {
          "line": 433,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "RequestBaseModel",
      "name": "LogicElements.ProjectModel",
      "attributes": [],
      "events": [
        {
          "type": "CustomEvent",
          "name": "project-object-changed",
          "description": "Fired when the project entity has been saved / updated in the datastore.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "project-object-deleted",
          "description": "project-object-deleted",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "project-model"
    },
    {
      "description": "Event based access to saved and history request datastore.\n\nThis model creates and updates updates request objects and updates\nURL index associated with the request.\nIt also supports querying for request data, deleting request data and\nundeleting it.\n\n## Events API\n\nAll events must be marked as cancelable or will be ignore by the model.\nIn ARC ecosystem models dispatch the same event after the object is updated\n(deleted, created, updated) but the event is not cancelable.\nComponents should only react on non cancelable model events as it means\nthat the change has been commited to the datastore.\n\nEach handled event is canceled so it's safe to put more than one model in\nthe DOM. Event's detail object will get `result` property with the promise\nresolved when operation commits.\n\n**save-request**\nThis event should be used when dealing with unprocessed request data.\nRequest object may contain Blob or FormData as a payload which would be lost\nif trying to store it in the data store. This flow handles payload\ntransformation.\n\nDetail's parameteres:\n- request - Required, ArcRequest object\n- projects - Optional, Array of strings, List of project names to create\nwith this request and associate with the request object.\n- options - Optional, map of additional options. Currently only `isDrive` is\nsupported. When set `export-google-drive` is dispatched. If the event is not\nhandled by the application the save flow fails.\n\n```javascript\nconst e = new CustomEvent('save-request', {\n bubbles: true,\n composed: true,\n cancelable: true,\n detail: {\n   request: {...}\n   projects: ['Test project'],\n   options: {\n     isDrive: true\n   }\n }\n};\nthis.dispatchEvent(e);\n```\n\n**request-object-read**\n\nReads the request from the data store.\n\nDetail's parameteres:\n\n- `id` - Required, String. Request ID\n- `type` - Required, String. Either `history` or `saved`\n- `rev` - Optional, String. Specific revision to read\n\n**request-object-changed**\n\nShould be only used if the payload is not `Blob` or `FormData` and\nall request properties are set. By default `save-request` event should be\nused.\n\nDetail's parameteres: ArcRequest object.\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/docs/\narc-models.md#arcrequest\n\n**request-object-deleted**\n\nDeletes the object from the data store.\n\nDetail's parameteres:\n\n- `id` - Required, String. Request ID\n- `type` - Required, String. Either `history` or `saved`\n\n**request-objects-deleted**\n\nDeletes number of requests in bulk.\n\nDetail's parameteres:\n\n- `type` - Required, String. Either `history` or `saved`\n- `items` - Required, Array<String>. List of request IDs to delete.\n\n**request-objects-undeleted**\n\nUsed to restore deleted request data.\n\nDetail's parameteres:\n\n- `type` - Required, String. Either `history` or `saved`\n- `items` - Required, Array<Object>. List of requests to restore.\nEach object must contain `_rev` and `_id`.\n\nThe `result` property contains result of calling `revertRemove()` function.\n\n**request-query**\n\nQueries for request data. This flow searches for URL data in a separate index\nand then performs full text search on the request data store.\n\nDetail's parameteres:\n\n- `q` - Required, String. User query.\n- `type` - Optional, String. Either `history` or `saved`. By default it\nsearches in both data stores.\n- `detailed` - Optional, Boolean. If set it uses slower algorithm but performs full\nsearch on the index. When false it only uses filer like query + '*'.",
      "summary": "",
      "path": "request-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "savedDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "historyDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "projectDb",
          "type": "PouchDB",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "historyIndexes",
          "type": "Array.<String>",
          "description": "List of fields to index in the history store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1127,
              "column": 2
            },
            "end": {
              "line": 1129,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "savedIndexes",
          "type": "Array.<String>",
          "description": "List of fields to index in the saved store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1134,
              "column": 2
            },
            "end": {
              "line": 1136,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "noIndexing",
          "type": "boolean | null | undefined",
          "description": "When set it skips request indexing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_workerRequestId",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "_workerPromises",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 6
            },
            "end": {
              "line": 154,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "Adds event listeners.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 190,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "Removes event listeners.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 2
            },
            "end": {
              "line": 209,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 442,
              "column": 2
            },
            "end": {
              "line": 455,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to\nlatest revision."
            },
            {
              "name": "opts",
              "type": "?Object",
              "description": "Additional options. Currently only `restorePayload`\nis supported"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a project object."
          }
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes database data by tye.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes saved or history data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1284,
              "column": 2
            },
            "end": {
              "line": 1302,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "getDatabase",
          "description": "Returns a reference to a PouchDB database instance for given type.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "PouchDB",
            "desc": "PouchDB instance for the datastore."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "readProject",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 90,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest\nrevision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "updateProject",
          "description": "Updates / saves a project object in the datastore.\nThis function fires `project-object-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "project",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "removeProject",
          "description": "Removed an object from the datastore.\nThis function fires `project-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 126,
              "column": 2
            },
            "end": {
              "line": 145,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "_saveRequestHandler",
          "description": "A handler for `save-request-data` custom event. It's special event to\nsave / update request data dispatched by the request editor.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 2
            },
            "end": {
              "line": 251,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createProjects",
          "description": "Create projects from project names.\nIt is used when creating a request with a new project.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 2
            },
            "end": {
              "line": 292,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "names",
              "type": "Array.<String>",
              "description": "Names of projects"
            },
            {
              "name": "requestId",
              "type": "?String",
              "description": "Request ID to add to the projects."
            }
          ],
          "return": {
            "type": "Promise.<Array.<String>>",
            "desc": "Promise resolved to list of project IDs"
          }
        },
        {
          "name": "_saveHistoryHandler",
          "description": "Handler for `save-history` object. It computes payload to savable state\nand saves history object.\nNote, the ID is is a combination of today's midningt timestamp, url and\nmethod. If such ID already exists the object is updated.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 2
            },
            "end": {
              "line": 331,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "saveRequest",
          "description": "Saves a request into a data store.\nIt handles payload to string conversion, handles types, and syncs request\nwith projects. Use `update()` method only if you are storing already\nprepared request object to the store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 2
            },
            "end": {
              "line": 368,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ArcRequest object"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Save request object. Currently only `isDrive`\nis supported"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resilved to updated request object."
          }
        },
        {
          "name": "_syncProjects",
          "description": "Sunchronizes project requests to ensure each project contains this\n`requestId` on their list of requests.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 2
            },
            "end": {
              "line": 430,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requestId",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "projects",
              "type": "?Array.<String>",
              "description": "List of request projects."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "readBulk",
          "description": "The same as `read()` but for a list of requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 464,
              "column": 2
            },
            "end": {
              "line": 484,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Requests type to restore."
            },
            {
              "name": "keys",
              "type": "Array.<String>",
              "description": "Request ids"
            },
            {
              "name": "opts",
              "type": "?Object",
              "description": "Additional options. Currently only `restorePayload`\nis supported"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "update",
          "description": "Updates / saves the request object in the datastore.\nThis function fires `request-object-changed` event.\n\nIf any of `name`, `method`, `url` or `legacyProject` properties change\nthen the old object is deleted and new is created with new ID.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 496,
              "column": 2
            },
            "end": {
              "line": 522,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "request",
              "type": "Object",
              "description": "An object to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to request object with updated `_rev`"
          }
        },
        {
          "name": "updateBulk",
          "description": "Updates more than one request in a bulk.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 529,
              "column": 2
            },
            "end": {
              "line": 555,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "requests",
              "type": "Array.<Object>",
              "description": "List of requests to update."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "List of PouchDB responses to each insert"
          }
        },
        {
          "name": "remove",
          "description": "Removed an object from the datastore.\nThis function fires `request-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 567,
              "column": 2
            },
            "end": {
              "line": 589,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to\nlatest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted\nobject."
          }
        },
        {
          "name": "revertRemove",
          "description": "Reverts deleted items.\nThis function fires `request-object-changed` event for each restored\nrequest.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 601,
              "column": 2
            },
            "end": {
              "line": 632,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "items",
              "type": "Array",
              "description": "List of request objects. Required properties are\n`_id` and `_rev`."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with restored objects. Objects have\nupdated `_rev` property."
          }
        },
        {
          "name": "_findNotDeleted",
          "description": "Finds last not deleted revision of a document.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 639,
              "column": 2
            },
            "end": {
              "line": 664,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object",
              "description": "PouchDB instance"
            },
            {
              "name": "items",
              "type": "Array",
              "description": "List of documents to process"
            }
          ],
          "return": {
            "type": "Promise.<Array>",
            "desc": "Last not deleted version of each document."
          }
        },
        {
          "name": "_findUndeletedRevision",
          "description": "Finds a next revision after the `deletedRevision` in the revisions history\nwhich is the one that reverts any changes made after it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 674,
              "column": 2
            },
            "end": {
              "line": 690,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "revs",
              "type": "Object",
              "description": "PouchDB revision history object"
            },
            {
              "name": "deletedRevision",
              "type": "Object",
              "description": "Revision of deleted object (after delete)."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Revision ID of the object before a change registered in\n`deletedRevision`"
          }
        },
        {
          "name": "_handleRead",
          "description": "Handler for request read event request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 695,
              "column": 2
            },
            "end": {
              "line": 721,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectSave",
          "description": "Handles onject save / update",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 727,
              "column": 2
            },
            "end": {
              "line": 765,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectDelete",
          "description": "Deletes the object from the datastore.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 771,
              "column": 2
            },
            "end": {
              "line": 794,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectsDelete",
          "description": "Queries for a list of projects.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 799,
              "column": 2
            },
            "end": {
              "line": 842,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleUndelete",
          "description": "handlers `request-objects-undeleted` event to restore deleted items",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 847,
              "column": 2
            },
            "end": {
              "line": 867,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_filterExistingItems",
          "description": "Filters query results to return only successfuly read data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 873,
              "column": 2
            },
            "end": {
              "line": 882,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result",
              "type": "Object",
              "description": "PouchDB query result"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "List of request that has been read."
          }
        },
        {
          "name": "_findOldRef",
          "description": "Finds a `_rev` for a doc.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 889,
              "column": 2
            },
            "end": {
              "line": 892,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "docs",
              "type": "Array",
              "description": "List of PouchDB documents to search for `_rev`"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Document ID"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Associated `_rev`"
          }
        },
        {
          "name": "_saveGoogleDrive",
          "description": "Saves the request on Google Drive.\nIt sends `drive-request-save` event to call a component responsible\nfor saving the request.\n\nThis do nothing if `opts.drive is not set.`",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 933,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "Data to save"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Save request options. See `saveRequest` for more info."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to updated object."
          }
        },
        {
          "name": "_handleList",
          "description": "Handler for `request-list` custom event.\nThe `result` property will contain a result of calling `list()` function.\n\nThe event has to be cancelable and not already cancelled in order to handle\nit.\n\nRequired properties on `detail` object:\n- `type` {String} Datastore type\n- `queryOptions` {Object} PouchDB query options.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 947,
              "column": 2
            },
            "end": {
              "line": 968,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "list",
          "description": "Performs a query for the request data.\n\nThis is not the same as searching for a request. This only lists\ndata from the datastore for given query options.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 979,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Datastore type"
            },
            {
              "name": "queryOptions",
              "type": "Object",
              "description": "PouchDB query options."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "List of PouchDB documents for the query."
          }
        },
        {
          "name": "_handleQuery",
          "description": "A handler for the `request-query` custom event. Queries the datastore for\nrequest data.\nThe event must have `q` property set on the detail object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 990,
              "column": 2
            },
            "end": {
              "line": 1003,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "query",
          "description": "Queries both URL and PouchDb data.\n\nIt calls, in order, `queryUrlData()` and `queryPouchDb()` functions.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1016,
              "column": 2
            },
            "end": {
              "line": 1023,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "Optional, type of the requests to search for.\nBy default it returns all data."
            },
            {
              "name": "detailed",
              "type": "?Boolean",
              "description": "If set it uses slower algorithm but performs full\nsearch on the index. When false it only uses filer like query + '*'."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "queryUrlData",
          "description": "Performs a query on the URL index data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1035,
              "column": 2
            },
            "end": {
              "line": 1098,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "Optional, type of the requests to search for.\nBy default it returns all data."
            },
            {
              "name": "detailed",
              "type": "?Boolean",
              "description": "If set it uses slower algorithm but performs full\nsearch on the index. When false it only uses filer like query + '*'."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "queryPouchDb",
          "description": "Performs a query on the request and/or history data store.\nIt uses PouchDB `query` function on built indexes.\nNote, it does not query for URL data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1110,
              "column": 2
            },
            "end": {
              "line": 1122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "Optional, type of the requests to search for.\nBy default it returns all data for both history and saved."
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "queryHistory",
          "description": "Queries history store using PouchDB quick search plugin (full text search).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1144,
              "column": 2
            },
            "end": {
              "line": 1146,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "querySaved",
          "description": "Queries Saved store using PouchDB quick search plugin (full text search).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1154,
              "column": 2
            },
            "end": {
              "line": 1156,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "_queryStore",
          "description": "See `query()` function for description.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1165,
              "column": 2
            },
            "end": {
              "line": 1191,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            },
            {
              "name": "db",
              "type": "Object",
              "description": "A handler to the data store."
            },
            {
              "name": "indexes",
              "type": "Array.<String>",
              "description": "List of fields to query"
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "A promise resolved to list of PouchDB docs."
          }
        },
        {
          "name": "indexData",
          "description": "Performs data inding using PouchDB api.\nThis is not the same as URL indexing using `url-indexer`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1199,
              "column": 2
            },
            "end": {
              "line": 1205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Data type - saved or history."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_listProjectRequestsHandler",
          "description": "Handler for `request-project-list` event to query for list of requests in\na project.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1211,
              "column": 2
            },
            "end": {
              "line": 1223,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "readProjectRequests",
          "description": "Reads list of requests associated with a project",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1231,
              "column": 2
            },
            "end": {
              "line": 1239,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Project id"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Additional options. Currently only `restorePayload`\nis supported"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "readProjectRequestsLegacy",
          "description": "Reads requests data related to the project from a legacy system.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1245,
              "column": 2
            },
            "end": {
              "line": 1256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Project id"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "sortRequestProjectOrder",
          "description": "Sorts requests list by `projectOrder` property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1264,
              "column": 2
            },
            "end": {
              "line": 1278,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "Object"
            },
            {
              "name": "b",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Number"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 135,
          "column": 0
        },
        "end": {
          "line": 1361,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "RequestBaseModel",
      "name": "LogicElements.RequestModel",
      "attributes": [
        {
          "name": "no-indexing",
          "description": "When set it skips request indexing.",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 25
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "drive-request-save",
          "description": "Fired when the request should be expored to Google Drive.\nThis element doesn't support this operation but this way it queries for\nan element that can export data to Google Drive.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "export-google-drive",
          "description": "Dispatched when saving request object to the data store and configuration\noption says to save request to Google Drive.\nThis component does not handles the logic responsible for Drive integration.\n\nNote, The request save flow fails when this event is not handled.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-indexing-error",
          "description": "Dispatched when request object indexing finishes with error.\nThis event does not bubbles.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-indexing-finished",
          "description": "Dispatched when request object indexing finishes.\nThis event does not bubbles.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-object-changed",
          "description": "Fired when the project entity has been saved / updated in the datastore.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-object-deleted",
          "description": "request-object-deleted",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-model"
    },
    {
      "description": "An element that saves Request URL in the history and serves list\nof saved URLs.\n\nThe `url-history-query` event expects the `q` property set on the `detail`\nobject. It is passed to the `query()` function and result of calling this\nfunction is set on detail's `result` property.\n\n### Example\n\n```javascript\n\nconst e = new CustomEvent('url-history-query', {\n detail: {\n   q: 'http://mulesoft.com/path/'\n },\n cancelable: true,\n bubbles: true,\n composed: true // if fired in shaddow DOM\n});\ndocument.body.dispatchEvent(e);\n\ne.detail.result.then((urls) => console.log(urls));\n```\n\nThe `url-history-store` requires the `value` property to be set on\nthe `detail` object and it is passed to the `store()` function.\n\n### Example\n\n```javascript\nconst e = new CustomEvent('url-history-store', {\n detail: {\n   value: 'http://mulesoft.com/path/'\n },\n cancelable: true,\n bubbles: true,\n composed: true\n});\ndocument.dispatchEvent(e);\n```\n\nBoth events are cancelled and propagation of the event is stopped.\nTherefore the event should be dispatched with `caneclable` flag set to true.\n\nThe element listens for events on the `window` object so it can be placed\nanywhere in the DOM.\n\n### Example\n\n```html\n<body>\n <url-history-saver></url-history-saver>\n</body>\n```",
      "summary": "",
      "path": "url-history-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleStore",
          "description": "Handles `url-history-store` custom event and stores an URL in the\ndatastore.\nThe event is canceled and propagation is topped upon handling. The\nevent should be fired with `cancelable` flag set to `true`.\n\nIt calls `store()` function with the `value` property of the `detail`\nobject as an attribute.\n\nIt creates a new `result` property on the `detail` object which is a\nresult of calling `store()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "store",
          "description": "It creates new entry if the URL wasn't already in the data store or\nupdates a `time` and `cnt` property of existing item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "A URL to store in the history store."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to the insert response of PouchDB\nobject (`ok`, `id` and `rev` keys)"
          }
        },
        {
          "name": "_handleQuery",
          "description": "Handles the `url-history-query` custom event.\nIt cancels the event and prohibiits bubbling. Therefore the event should be\nfired as a `cancelable`. It adds the `result` property to the `detail`\nobject which carries a Promise that will resolve to a list of PouchDB\ndocumentnts. It is the same as result as for calling `query()` functiuon.\n\nThe event must contain a `q` property with the query string that is passed\nto the `query()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "query",
          "description": "Gets a list of maching URLs from the datastore.\nList elements are carrying the `url` property with the full\nURL and `cnt` property with number of times this URL has been updated in\nthe data store. `cnt` is used to sort the results.\n\nAdditional properties are regular PouchDB properties like `_id` and `_rev`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 217,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "A string to search for. It result with entries that url\ncontains (not start with!) a `q`."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a list of history items."
          }
        },
        {
          "name": "_sortFunction",
          "description": "A function used to sort query list items. It relays on two properties that\nare set by query function on array entries: `_time` which is a timestamp of\nthe entry and `cnt` which is number of times the URL has been used.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "Object"
            },
            {
              "name": "b",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Number"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 76,
          "column": 2
        },
        "end": {
          "line": 246,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.UrlHistoryModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "url-history-model"
    },
    {
      "description": "Events based access to websockets URL history datastore.\n\nNote: **All events must be cancelable.** When the event is cancelled by an instance\nof the element it won't be handled again by other instance that possibly exists\nin the DOM.\n\nCancellable event is a request to models for change. Non-cancellable event\nis a notification for views to update their values.\nFor example `request-object-changed` event notifies model to update object in\nthe datastore if the event is cancelable and to update views if it's not\ncancellable.\n\nEach handled event contains the `result` property on the `detail` object. It\ncontains a `Promise` object with a result of the operation. Also, for update / delete\nevents the same non-cancelable event is fired.\n\nEvents handled by this element are cancelled and propagation of the event is\nstopped.",
      "summary": "",
      "path": "websocket-url-history-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 58,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleRead",
          "description": "Handles the read object event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 107,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "update",
          "description": "Updates / saves the object in the datastore.\nThis function fires `websocket-url-history-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          }
        },
        {
          "name": "_handleQueryHistory",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 138,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleQuery",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "list",
          "description": "Lists websocket history objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 177,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "query",
              "type": "?String",
              "description": "A partial url to match results."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved to a list of PouchDB documents."
          }
        },
        {
          "name": "_sortFunction",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 197,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_computeTime",
          "description": "Computes time for timestamp's day, month and year and time set to 0.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 2
            },
            "end": {
              "line": 206,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Database entry item."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The same database item with `_time` property."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 40,
          "column": 0
        },
        "end": {
          "line": 207,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.WebsocketUrlHistoryModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "websocket-url-history-model"
    },
    {
      "description": "Events based access to REST APIs datastore.",
      "summary": "",
      "path": "rest-api-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "indexDb",
          "type": "?",
          "description": "A handler to the datastore. Contains listing data.\n   ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "dataDb",
          "type": "?",
          "description": "A handler to the datastore containing REST API data\n(AMF model).\n   ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 2
            },
            "end": {
              "line": 109,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_cachedQueryOptions",
          "type": "Object | null | undefined",
          "description": "Cached query options for index data listing.\nKeys is the nextPageToken returned with listing response. If the\npage token has been used with the query it will takes this data\nto return next page results.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "defaultQueryOptions",
          "type": "Object | null | undefined",
          "description": "Database query options for pagination.\nOverride this value to change the query options like limit of the results in one call.\n\nThis is query options passed to the PouchDB `allDocs` function. Note that it will not\nset `include_docs` option. A conviniet shortcut is to set the the `includeDocs` property\nand the directive will be added automatically.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 2
            },
            "end": {
              "line": 84,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 2
            },
            "end": {
              "line": 95,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "readIndex",
          "description": "Reads an entry from the index datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 124,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a project object."
          }
        },
        {
          "name": "readData",
          "description": "Reads an entry from the raml data datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 2
            },
            "end": {
              "line": 138,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a project object."
          }
        },
        {
          "name": "updateData",
          "description": "Creates / updates API data object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 2
            },
            "end": {
              "line": 174,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "indexId",
              "type": "String",
              "description": "Id of the index object"
            },
            {
              "name": "version",
              "type": "String",
              "description": "Version of the API data"
            },
            {
              "name": "data",
              "type": "Object",
              "description": "AMF model to store"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a document with updated `_rev`"
          }
        },
        {
          "name": "updateIndex",
          "description": "Creates / updates API index object.\nThe `_id` property must be already set on the object.\n\nThis function fires `api-index-changed` custom event on success.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "doc",
              "type": "Object",
              "description": "PouchDB document."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a document with updated `_rev`"
          }
        },
        {
          "name": "updateIndexBatch",
          "description": "Updates many index objects in one request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 2
            },
            "end": {
              "line": 230,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "docs",
              "type": "Array.<Object>",
              "description": "List of PouchDB documents to update."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a list of document with updated `_rev`"
          }
        },
        {
          "name": "remove",
          "description": "Removes all AMF and index data from datastores for given index id.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 2
            },
            "end": {
              "line": 253,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Index entry ID to delete."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          }
        },
        {
          "name": "removeVersion",
          "description": "Removes information about version from AMD data datastore and from index\ndata.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 2
            },
            "end": {
              "line": 284,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Index object ID"
            },
            {
              "name": "version",
              "type": "String",
              "description": "Version to remove."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "removeVersions",
          "description": "Removes versions of API data in bulk operation.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 2
            },
            "end": {
              "line": 297,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "indexId",
              "type": "String",
              "description": "Index object ID"
            },
            {
              "name": "versions",
              "type": "Array.<String>",
              "description": "List of versions to remove."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_removeVersions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 306,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ids"
            }
          ]
        },
        {
          "name": "_removeVersion",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 2
            },
            "end": {
              "line": 331,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "listIndex",
          "description": "Lists index data.\n\n### QueryResultObject\n- `data` {Array<Object>} List of PouchDB documents read from the datastore\n- `nextPageToken` {String} Pagination string to be used with next call\nto get resutls for a next page. The nextPageToken don't change over\nsubsequent requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 345,
              "column": 2
            },
            "end": {
              "line": 369,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opts",
              "type": "Object",
              "description": "Query options:\n- nextPageToken {String} Received from previous query page token."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved to a query result object on success."
          }
        },
        {
          "name": "_makeNextPageToken",
          "description": "Generates `nextPageToken` as a random string.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 375,
              "column": 2
            },
            "end": {
              "line": 382,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "String",
            "desc": "Random 32 characters long string."
          }
        },
        {
          "name": "_indexChangeHandler",
          "description": "A handler for `api-index-changed` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_readHandler",
          "description": "Handler for the `api-data-read` custom event.\n\nEvent `detail` object must contain the `id` property with datastore entry\nid and may contain a `rev` property to read a specific revision.\n\nIt sets a `result` property on the event `detail` object that is a\npromise returned by `readData()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 412,
              "column": 2
            },
            "end": {
              "line": 425,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_readIndexHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 427,
              "column": 2
            },
            "end": {
              "line": 444,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dataUpdateHandler",
          "description": "Handler for the `api-data-changed` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 450,
              "column": 2
            },
            "end": {
              "line": 471,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deletedHandler",
          "description": "Deletes the object from the datastores.\nIt is only handled if the event in cancelable and not cancelled.\n\nEvent has to have `id` property set on the detail object.\n\nIt sets `result` property on the event detail object with a result of\ncalling `remove()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 483,
              "column": 2
            },
            "end": {
              "line": 495,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_versionDeletedHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 497,
              "column": 2
            },
            "end": {
              "line": 514,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexesUpdatedHandler",
          "description": "Handler for the `api-index-changed-batch` custom event.\nIt requires to have `items` property set to event detail as an array of\nPouchDB documents to update.\n\nIt sets `result` property on the event detail object with a result of\ncalling `updateIndexBatch()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 525,
              "column": 2
            },
            "end": {
              "line": 543,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexListHandler",
          "description": "Handler for the `api-index-list` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 549,
              "column": 2
            },
            "end": {
              "line": 557,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 593,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.RestApiModel",
      "attributes": [
        {
          "name": "default-query-options",
          "description": "Database query options for pagination.\nOverride this value to change the query options like limit of the results in one call.\n\nThis is query options passed to the PouchDB `allDocs` function. Note that it will not\nset `include_docs` option. A conviniet shortcut is to set the the `includeDocs` property\nand the directive will be added automatically.",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "api-data-changed",
          "description": "Fired when RAML (API) data has been updated.\nThe event is non cancelable which means that the change is commited to the\ndatastore.\n\nIt sets a `result` property on event `detail` object which contains a return\nvalue from calling `updateData()` function.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "api-deleted",
          "description": "Fired when data has been deleted.\nThe event is non cancelable which means that the change is commited to the\ndatastore.\n\nIt sets a `result` property on event `detail` object which contains a return\nvalue from calling `remove()` function.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "api-index-changed",
          "description": "Fired when index data has been updated.\nThe event is non cancelable which means that the change is commited to the\ndatastore.\n\nIt sets a `result` property on event `detail` object which contains a return\nvalue from calling `updateIndex()` function.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "rest-api-model"
    },
    {
      "description": "Model for host rules.\n\nAvailable events:\n\n- `host-rules-insert` Bulk add hosts\n- `host-rules-changed` Change / add record\n- `host-rules-deleted` Remove record\n- `host-rules-list` Lists all rules\n- `host-rules-clear` Clears hosts datastore\n\nEach event must be cancelable or it will be ignored.\nThe insert, change and delete events dispatches non cancelable update/delete\nevents. Application should listen for this events to update it's state.",
      "summary": "",
      "path": "host-rules-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 54,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 63,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "update",
          "description": "Updates / saves the host rule object in the datastore.\nThis function fires `host-rules-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 2
            },
            "end": {
              "line": 83,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule",
              "type": "Object",
              "description": "A rule object to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to updated object with updated `_rev`"
          }
        },
        {
          "name": "updateBulk",
          "description": "Updates / saves the host rule object in the datastore.\nThis function fires `host-rules-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 2
            },
            "end": {
              "line": 117,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rules",
              "type": "Array.<Object>",
              "description": "List of rules to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to the result of Pouch DB operation"
          }
        },
        {
          "name": "remove",
          "description": "Removed an object from the datastore.\nThis function fires `host-rules-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 2
            },
            "end": {
              "line": 146,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          }
        },
        {
          "name": "list",
          "description": "Lists all existing host rules",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 2
            },
            "end": {
              "line": 166,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to list of the host rules"
          }
        },
        {
          "name": "_insertHandler",
          "description": "Handler for `host-rules-insert` custom event. Creates rules in bulk.\nIt sets `result` property on event detail object with a result of calling\n`updateBulk()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updatedHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 219,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deletedHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 236,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_listHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 2
            },
            "end": {
              "line": 246,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 2
            },
            "end": {
              "line": 258,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 34,
          "column": 0
        },
        "end": {
          "line": 259,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.HostRulesModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "host-rules-model"
    },
    {
      "description": "Model for variables\n\nAvailable events:\n\n- `environment-read` Read environment object\n- `environment-updated` Change / add record\n- `environment-deleted` Remove record\n- `environment-list-variables` List variables for an environment\n- `environment-list` List variables\n- `variable-updated` - Add / update variable\n- `variable-deleted` - Delete variable\n- `destroy-model` - Delete model action\n\nEach event must be cancelable or it will be ignored.\nThe insert, change and delete events dispatches non cancelable update/delete\nevents. Application should listen for this events to update it's state.",
      "summary": "",
      "path": "variables-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "environmentDb",
          "type": "Object",
          "description": "Handler to the environments database.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 2
            },
            "end": {
              "line": 82,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "variableDb",
          "type": "Object",
          "description": "Handler to the variables database.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 90,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes saved or history data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 533,
              "column": 2
            },
            "end": {
              "line": 549,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_envReadHandler",
          "description": "Handler for `environment-read` custom event.\nReads environment onject info by it's name.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 2
            },
            "end": {
              "line": 109,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_envUpdateHandler",
          "description": "A handler for the `environment-updated` custom event.\nUpdates the environment in the data store.\n\nThe `environment-updated` custom event should be cancellable or the event\nwon't be handled at all.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 2
            },
            "end": {
              "line": 125,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateEnvironment",
          "description": "Updates environment value.\n\nIf the `value` doesn't contains the `_id` property a new environment is\ncreated. The `_rev` property is always updated to the latest value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "A PouchDB object to be stored. It should contain the\n`_id` property if the object is about to be updated. If the `_id` doesn't\nexists a new object is created."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "__updateEnvironmentName",
          "description": "A special case when the name of the environment changes.\nIt updates any related to this environment variables.\n\nIf this is current environment it also changes its name.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "oldName",
              "type": "String",
              "description": "Name of the environment befoe the change"
            },
            {
              "name": "data",
              "type": "String",
              "description": "Updated data store entry"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_envDeleteHandler",
          "description": "A handler for the `environment-deleted` custom event.\nDeletes a variable in the data store.\n\nThe `environment-deleted` custom event should be cancellable or the event\nwon't be handled at all.\n\nThe delete function fires non cancellable `environment-deleted` custom\nevent so the UI components can use it to update their values.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 2
            },
            "end": {
              "line": 237,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteEnvironment",
          "description": "Deletes an environment from the data store.\n\nAfter updating the data store this method sends the `environment-deleted`\nevent that can't be cancelled so other managers that are present in the DOM\nwill not update the value again. If you don't need updated `_rev` you don't\nhave to listen for this event.\n\nBecause this function changes the `environments` array the\n`environments-list-changed` event is fired alongside the `environment-deleted`\nevent.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 2
            },
            "end": {
              "line": 286,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "Object",
              "description": "The PouchDB `_id` property of the object to delete."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_deleteEnvironmentVariables",
          "description": "To be called after the environment has been deleted. It clears variables\nfor the environment.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 2
            },
            "end": {
              "line": 323,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "environment",
              "type": "String",
              "description": "The environment name."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_envListHandler",
          "description": "A handler for the `environment-list` custom event.\nAdds a `value` propety of the event `detail` object with the array of the\nuser defined environments objects. Each item is a PouchDb data store item\n(with `_id` and `_rev`).\n\nThe `value` set on the details object can be undefined if the user haven't\ndefined any environments or if the manager haven't restored the list yet.\nIn the later case the event target element should listen for\n`environments-list-changed` event to update the list of available environments.\n\nThe `environment-current` custom event should be cancellable or the event\nwon't be handled at all.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 2
            },
            "end": {
              "line": 346,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "listEnvironments",
          "description": "Lists all user defined environments.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 2
            },
            "end": {
              "line": 359,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with the list of environments."
          }
        },
        {
          "name": "_varListHandler",
          "description": "A handler for the `variable-list` custom event.\n\nAdds a `value` propety of the event `detail` object with the array of the\nvariables restored for current environment. Each item is a PouchDb data\nstore item (with `_id` and `_rev`).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 369,
              "column": 2
            },
            "end": {
              "line": 375,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "listVariables",
          "description": "Refreshes list of variables for the `environment`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 384,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "environment",
              "type": "?String",
              "description": "Name of the environment to get the variables\nfrom. If not set then `default` fill be used."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with the list of variables for the\nenvironment."
          }
        },
        {
          "name": "_varUpdateHandler",
          "description": "A handler for the `variable-updated` custom event.\nUpdates the variable in the data store.\n\nThe `variable-updated` custom event should be cancellable or the event\nwon't be handled at all.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 410,
              "column": 2
            },
            "end": {
              "line": 416,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateVariable",
          "description": "Updates a variable value.\n\nIf the `value` doesn't contains the `_id` property a new variable will\nbe created. The `_rev` property will be always updated to the latest value\nso there's no need to set it on the object.\n\nAfter saving the data this method sends the `variable-updated` event that\ncan't be cancelled so other managers that are present in the DOM will not\nupdate the value again.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 2
            },
            "end": {
              "line": 470,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "A PouchDB object to be stored. It should contain the\n`_id` property if the object is about to be updated. If the `_id` doesn't\nexists a new object is created."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_varDeleteHandler",
          "description": "Deletes a variable from the data store.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 479,
              "column": 2
            },
            "end": {
              "line": 485,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "Optional. If it is called from the event handler, this\nis the event object. If initial validation fails then it will set `error`\nproperty on the `detail` object."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteVariable",
          "description": "Deletes a variable from the data store.\n\nAfter updating the data store this method sends the `variable-deleted`\nevent that can't be cancelled so other managers that are present in the DOM\nwill not update the value again. If you don't need updated `_rev` you don't\nhave to listen for this event.\n\nBecause this function changes the `variables` array the\n`variables-list-changed` event is fired alongside the `variable-deleted`\nevent.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 502,
              "column": 2
            },
            "end": {
              "line": 527,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "Object",
              "description": "The PouchDB `_id` property of the object to delete."
            }
          ],
          "return": {
            "type": "Promise"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 550,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.VariablesModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "variables-model"
    },
    {
      "description": "Model for host rules.",
      "summary": "",
      "path": "auth-data-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cache",
          "type": "Object | null | undefined",
          "description": "Cashed list of authorization data for current session.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_queryHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "query",
          "description": "Restores the database object entry or cached object if any.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "The URL of the request"
            },
            {
              "name": "authMethod",
              "type": "String",
              "description": "The Authorization method to restore data for."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_updateHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 97,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "update",
          "description": "Creates or updates the auth data in the data store for given method and URl.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 2
            },
            "end": {
              "line": 137,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "The URL of the request"
            },
            {
              "name": "authMethod",
              "type": "String",
              "description": "The Authorization method to restore data for."
            },
            {
              "name": "authData",
              "type": "Object",
              "description": "The data to store."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_normalizeUrl",
          "description": "Removes query parameters and the fragment part from the URL",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "URL to process"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Canonical URL."
          }
        },
        {
          "name": "_computeKey",
          "description": "Computes the database key for auth data",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 2
            },
            "end": {
              "line": 174,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "method",
              "type": "String",
              "description": "The Authorization method to restore data for."
            },
            {
              "name": "url",
              "type": "?String",
              "description": "The URL of the request"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Datastore key for auth data"
          }
        },
        {
          "name": "_findCachedAuthData",
          "description": "Finds an auth data for given `url`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Authorization type."
            },
            {
              "name": "url",
              "type": "String",
              "description": "The URL of the request."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Auth data if exists in the cache."
          }
        },
        {
          "name": "_cacheAuthData",
          "description": "Sends authorization data to the cache.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Authorization type."
            },
            {
              "name": "url",
              "type": "String",
              "description": "current request URL"
            },
            {
              "name": "data",
              "type": "Object",
              "description": "Authorization data to store."
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 205,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.AuthDataModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "auth-data-model"
    },
    {
      "description": "An element responsible for indexing and querying for URL data.\n\nTo index an URL it requires the following properties:\n- url - the URL to index\n- id - datastore id of referenced object\n- type - type of the object - it's data store name. Type is returned\nwith query results.\n\nIt queries for indexed data by looking into URL structure. When the query\nresult is ready it returns ordered list of results (by relevance) with\n`id` (referenced object), and `type`. The query function do not read the\ndata from referenced data store.\n\nThe component is used to cooperate with saved/history request data model\nand with REST APIs model. However it can index any URL.\n\nThe component automatically handles request update/delete events to index or\nremove index of a request object.\n\n## Usage\n\n### Storing URL data\n\n```javascript\nconst e = new CustomEvent('url-index-update', {\n composed: true,\n bubbles: true,\n cancelable: true,\n detail: {\n   data: [{\n     id: 'xxx',\n     type: 'saved-requests',\n     url: 'https://domain.com'\n   }]\n }\n});\nthis.dispatchEvent(e);\ne.detail.result\n.then((result) => {\n console.log(result);\n});\n```\n\nor directly on the component:\n\n```javascript\nconst node = document.querySelector('url-indexer');\nnode.index([{\n id: 'xxx',\n type: 'saved-requests',\n url: 'https://domain.com'\n}])\n.then((result) => {});\n```\n\n### Querying for data\n\n```javascript\nconst e = new CustomEvent('url-index-query', {\n composed: true,\n bubbles: true,\n cancelable: true,\n detail: {\n   q: 'https://...',\n   type: 'saved-requests', // optional\n   detailed: false // Optional, default to `false`\n }\n});\nthis.dispatchEvent(e);\ne.detail.result\n.then((result) => {\n console.log(result);\n});\n```\n\nor direct call:\n\n```javascript\nconst node = document.querySelector('url-indexer');\nnode.query('https://...', {\n type: 'saved-requests', // optional\n detailed: false // Optional, default to `false`\n})\n.then((result) => {});\n```\nSee query method for description of parameters.",
      "summary": "",
      "path": "url-indexer.html",
      "properties": [
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1156,
              "column": 8
            },
            "end": {
              "line": 1156,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1158,
              "column": 8
            },
            "end": {
              "line": 1158,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1160,
              "column": 8
            },
            "end": {
              "line": 1160,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1162,
              "column": 8
            },
            "end": {
              "line": 1162,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1164,
              "column": 8
            },
            "end": {
              "line": 1164,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1166,
              "column": 8
            },
            "end": {
              "line": 1166,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1168,
              "column": 8
            },
            "end": {
              "line": 1168,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1170,
              "column": 8
            },
            "end": {
              "line": 1170,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1172,
              "column": 8
            },
            "end": {
              "line": 1172,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1174,
              "column": 8
            },
            "end": {
              "line": 1174,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1176,
              "column": 8
            },
            "end": {
              "line": 1176,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1178,
              "column": 8
            },
            "end": {
              "line": 1178,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1180,
              "column": 8
            },
            "end": {
              "line": 1180,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1182,
              "column": 8
            },
            "end": {
              "line": 1182,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 8
            },
            "end": {
              "line": 1184,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "PROPERTY_EFFECT_TYPES",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1187,
              "column": 6
            },
            "end": {
              "line": 1189,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 435,
              "column": 8
            },
            "end": {
              "line": 435,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 437,
              "column": 8
            },
            "end": {
              "line": 437,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 439,
              "column": 8
            },
            "end": {
              "line": 439,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 8
            },
            "end": {
              "line": 441,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 443,
              "column": 8
            },
            "end": {
              "line": 443,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Element>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 445,
              "column": 8
            },
            "end": {
              "line": 445,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "indexStoreName",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 2
            },
            "end": {
              "line": 124,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "indexStoreVersion",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 2
            },
            "end": {
              "line": 128,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2424,
              "column": 6
            },
            "end": {
              "line": 2449,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 452,
              "column": 6
            },
            "end": {
              "line": 457,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 467,
              "column": 6
            },
            "end": {
              "line": 469,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to add"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 479,
              "column": 6
            },
            "end": {
              "line": 481,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_addPropertyToAttributeMap",
          "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 132,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_definePropertyAccessor",
          "description": "Defines a property accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 140,
              "column": 9
            },
            "end": {
              "line": 153,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 553,
              "column": 6
            },
            "end": {
              "line": 559,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 460,
              "column": 6
            },
            "end": {
              "line": 493,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 224,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of property values that were overwritten\n  when creating property accessors."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_setProperty",
          "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 235,
              "column": 8
            },
            "end": {
              "line": 239,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_getProperty",
          "description": "Returns the value for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 247,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value for the given property"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_setPendingProperty",
          "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 264,
              "column": 8
            },
            "end": {
              "line": 280,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "ext",
              "type": "boolean=",
              "description": "Not used here; affordance for closure"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_invalidateProperties",
          "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 290,
              "column": 8
            },
            "end": {
              "line": 300,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 313,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 333,
              "column": 8
            },
            "end": {
              "line": 342,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_shouldPropertiesChange",
          "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 356,
              "column": 8
            },
            "end": {
              "line": 358,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "!Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "!Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "true if changedProps is truthy"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_propertiesChanged",
          "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 372,
              "column": 8
            },
            "end": {
              "line": 373,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "!Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "!Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 393,
              "column": 8
            },
            "end": {
              "line": 400,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 413,
              "column": 8
            },
            "end": {
              "line": 420,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute that changed"
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old attribute value"
            },
            {
              "name": "value",
              "type": "?string",
              "description": "New attribute value"
            },
            {
              "name": "namespace",
              "type": "?string",
              "description": "Attribute namespace."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 434,
              "column": 8
            },
            "end": {
              "line": 441,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 453,
              "column": 8
            },
            "end": {
              "line": 459,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect to."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 474,
              "column": 8
            },
            "end": {
              "line": 481,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 494,
              "column": 8
            },
            "end": {
              "line": 501,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string | undefined)",
            "desc": "String serialized from the provided\nproperty  value."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 515,
              "column": 8
            },
            "end": {
              "line": 524,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1218,
              "column": 6
            },
            "end": {
              "line": 1222,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 198,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 300,
              "column": 6
            },
            "end": {
              "line": 302,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 311,
              "column": 6
            },
            "end": {
              "line": 313,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1256,
              "column": 6
            },
            "end": {
              "line": 1264,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1274,
              "column": 6
            },
            "end": {
              "line": 1280,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1304,
              "column": 6
            },
            "end": {
              "line": 1306,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1316,
              "column": 6
            },
            "end": {
              "line": 1318,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1328,
              "column": 6
            },
            "end": {
              "line": 1330,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1340,
              "column": 6
            },
            "end": {
              "line": 1342,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1374,
              "column": 6
            },
            "end": {
              "line": 1406,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(number | string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1429,
              "column": 6
            },
            "end": {
              "line": 1437,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1544,
              "column": 6
            },
            "end": {
              "line": 1549,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1570,
              "column": 6
            },
            "end": {
              "line": 1581,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1595,
              "column": 6
            },
            "end": {
              "line": 1608,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 571,
              "column": 6
            },
            "end": {
              "line": 580,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1637,
              "column": 6
            },
            "end": {
              "line": 1648,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1735,
              "column": 6
            },
            "end": {
              "line": 1745,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1756,
              "column": 6
            },
            "end": {
              "line": 1761,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Source path to link."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1773,
              "column": 6
            },
            "end": {
              "line": 1778,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Target path to unlink."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1810,
              "column": 6
            },
            "end": {
              "line": 1814,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1835,
              "column": 6
            },
            "end": {
              "line": 1837,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1860,
              "column": 6
            },
            "end": {
              "line": 1870,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1886,
              "column": 6
            },
            "end": {
              "line": 1895,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1910,
              "column": 6
            },
            "end": {
              "line": 1919,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1938,
              "column": 6
            },
            "end": {
              "line": 1975,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1990,
              "column": 6
            },
            "end": {
              "line": 1999,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2015,
              "column": 6
            },
            "end": {
              "line": 2023,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2038,
              "column": 6
            },
            "end": {
              "line": 2055,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2068,
              "column": 6
            },
            "end": {
              "line": 2075,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2089,
              "column": 6
            },
            "end": {
              "line": 2099,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string | function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2112,
              "column": 6
            },
            "end": {
              "line": 2118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2129,
              "column": 6
            },
            "end": {
              "line": 2137,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2148,
              "column": 6
            },
            "end": {
              "line": 2161,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2175,
              "column": 6
            },
            "end": {
              "line": 2181,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2358,
              "column": 6
            },
            "end": {
              "line": 2381,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2460,
              "column": 6
            },
            "end": {
              "line": 2481,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 2
            },
            "end": {
              "line": 148,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 594,
              "column": 6
            },
            "end": {
              "line": 610,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 637,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 654,
              "column": 6
            },
            "end": {
              "line": 659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_indexUpdateHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 168,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexQueryHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 2
            },
            "end": {
              "line": 184,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_requestChangeHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexDebounce",
          "description": "Calles index function with debouncer.\nThe debouncer runs the queue after 25 ms. Bulk operations should be called\nonece unless there's a lot of data to process.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 2
            },
            "end": {
              "line": 235,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "url",
              "type": "String",
              "description": "Request URL"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type (saved or history)"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_requestDeleteHandler",
          "description": "Handler for `request-object-deleted` custom event.\nIt expects `id` property to be set on event detail object.\nCancelable events are ignored.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 2
            },
            "end": {
              "line": 247,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deleteIndexDebounce",
          "description": "Calles deleteIndexedData function with debouncer.\nThe debouncer runs the queue after 25 ms. Bulk operations should be called\nonece unless there's a lot of data to process.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 2
            },
            "end": {
              "line": 275,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deleteModelHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 277,
              "column": 2
            },
            "end": {
              "line": 287,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "openSearchStore",
          "description": "Opens search index data store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 2
            },
            "end": {
              "line": 312,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "createSchema",
          "description": "Creates a database schema when is newly created.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "Database create request event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "index",
          "description": "Indexes request data in dedicated index store for requests.\n\nEach item on the `requests` list must contain:\n- `id` - stored object ID (returned by the query)\n- `type` - store name or identifier (returned by the query)\n- `url` - the URL to index",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 338,
              "column": 2
            },
            "end": {
              "line": 363,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requests",
              "type": "Array",
              "description": "List of requests to index."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_notifyIndexFinished",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 2
            },
            "end": {
              "line": 370,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteIndexedData",
          "description": "Removes indexed data for given requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ids",
              "type": "Array.<String>",
              "description": "List of request ids to remove."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "deleteIndexedType",
          "description": "Removes indexed data for given `type`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 407,
              "column": 2
            },
            "end": {
              "line": 430,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "`history` or `saved`"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_deleteByKey",
          "description": "Removes an item by id.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 437,
              "column": 2
            },
            "end": {
              "line": 446,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Entry id"
            },
            {
              "name": "store",
              "type": "Object",
              "description": "Data store with the data."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_getIndexedData",
          "description": "Retreives existing index data for the request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 454,
              "column": 2
            },
            "end": {
              "line": 479,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object",
              "description": "Database reference"
            },
            {
              "name": "requestId",
              "type": "String",
              "description": "Request ID."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>"
          }
        },
        {
          "name": "_prepareRequestIndexData",
          "description": "Prepares a list of objects to put into the indexeddb to index the request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 486,
              "column": 2
            },
            "end": {
              "line": 518,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "Request object with `id` and `url` properties"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "List of already indexed properties"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "A list of objects to store"
          }
        },
        {
          "name": "_generateId",
          "description": "Generates ID for URL index object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 525,
              "column": 2
            },
            "end": {
              "line": 527,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "URL to search for. It should be lower case"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            }
          ],
          "return": {
            "type": "String"
          }
        },
        {
          "name": "_createIndexIfMissing",
          "description": "Creates an index datastore object if it doesn't exists in the list\nof indexed items.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 538,
              "column": 2
            },
            "end": {
              "line": 553,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "URL to search for."
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Index object to store or `undefined` if already\nindexed."
          }
        },
        {
          "name": "_getUrlObject",
          "description": "Creates an index object for the whole url, if it doesn't exists in already\nindexed data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 563,
              "column": 2
            },
            "end": {
              "line": 566,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "The request object to index"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object to store or `undefined` if the object\nalready exists."
          }
        },
        {
          "name": "_getAuthorityPath",
          "description": "Creates an index object for authority part of the url,\nif it doesn't exists in already indexed data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 578,
              "column": 2
            },
            "end": {
              "line": 581,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parser",
              "type": "URL",
              "description": "Instance of URL object"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object to store or `undefined` if the object\nalready exists."
          }
        },
        {
          "name": "_getPathQuery",
          "description": "Creates an index object for path part of the url,\nif it doesn't exists in already indexed data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 593,
              "column": 2
            },
            "end": {
              "line": 596,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parser",
              "type": "URL",
              "description": "Instance of URL object"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object to store or `undefined` if the object\nalready exists."
          }
        },
        {
          "name": "_getQueryString",
          "description": "Creates an index object for query string of the url,\nif it doesn't exists in already indexed data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 608,
              "column": 2
            },
            "end": {
              "line": 615,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parser",
              "type": "URL",
              "description": "Instance of URL object"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object to store or `undefined` if the object\nalready exists."
          }
        },
        {
          "name": "_appendQueryParams",
          "description": "Creates an index object for each query parameter of the url,\nif it doesn't exists in already indexed data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 626,
              "column": 2
            },
            "end": {
              "line": 638,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parser",
              "type": "URL",
              "description": "Instance of URL object"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            },
            {
              "name": "target",
              "type": "Array.<Object>",
              "description": "A list where to put generated data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_storeIndexes",
          "description": "Stores indexes in the data store.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 647,
              "column": 2
            },
            "end": {
              "line": 661,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object"
            },
            {
              "name": "indexes",
              "type": "Array.<Object>",
              "description": "List of indexes to store."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "window"
          }
        },
        {
          "name": "_removeRedundantIndexes",
          "description": "Removes indexed items that are no longer relevant for the request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 668,
              "column": 2
            },
            "end": {
              "line": 682,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object"
            },
            {
              "name": "items",
              "type": "Array.<Object>",
              "description": "List of datastore index items."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "query",
          "description": "Queries for indexed data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 693,
              "column": 2
            },
            "end": {
              "line": 703,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "query",
              "type": "String",
              "description": "The query"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Search options:\n- type (string: saved || history): Request type\n- detailed (Booelan): If set it uses slower algorithm but performs full\nsearch on the index. When false it only uses filer like query + '*'."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_searchIndexOf",
          "description": "Performance search on the data store using `indexOf` on the primary key.\nThis function is slower than `_searchCasing` but much, much faster than\nother ways to search for this data.\nIt allows to perform a search on the part of the url only like:\n`'*' + q + '*'` while `_searchCasing` only allows `q + '*'` type search.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 716,
              "column": 2
            },
            "end": {
              "line": 760,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object",
              "description": "Reference to the database"
            },
            {
              "name": "q",
              "type": "String",
              "description": "A string to search for"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "A type of the request to include into results."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_searchCasing",
          "description": "Uses (in most parts) algorithm described at\nhttps://www.codeproject.com/Articles/744986/How-to-do-some-magic-with-indexedDB\nDistributed under Apache 2 license\n\nThis is much faster than `_searchIndexOf` function. However may not find\nsome results. For ARC it's a default search function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 774,
              "column": 2
            },
            "end": {
              "line": 823,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object",
              "description": "Reference to the database"
            },
            {
              "name": "q",
              "type": "String",
              "description": "A string to search for"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "A type of the request to include into results."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_nextCasing",
          "description": "https://www.codeproject.com/Articles/744986/How-to-do-some-magic-with-indexedDB\nDistributed under Apache 2 license",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 833,
              "column": 2
            },
            "end": {
              "line": 867,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "[description]"
            },
            {
              "name": "lowerKey",
              "type": "String",
              "description": "[description]"
            },
            {
              "name": "upperNeedle",
              "type": "String",
              "description": "[description]"
            },
            {
              "name": "lowerNeedle",
              "type": "String",
              "description": "[description]"
            }
          ],
          "return": {
            "type": "(String | undefined)"
          }
        },
        {
          "name": "_clearIndexedData",
          "description": "Removes all indexed data.\n\nTODO: This should allow to remove by type",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 875,
              "column": 2
            },
            "end": {
              "line": 891,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 670,
              "column": 6
            },
            "end": {
              "line": 673,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2500,
              "column": 6
            },
            "end": {
              "line": 2514,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2592,
              "column": 6
            },
            "end": {
              "line": 2602,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 333,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2535,
              "column": 6
            },
            "end": {
              "line": 2576,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 388,
              "column": 6
            },
            "end": {
              "line": 391,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createProperties",
          "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 326,
              "column": 7
            },
            "end": {
              "line": 330,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "attributeNameForProperty",
          "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 79,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property to convert"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Attribute name corresponding to the given property."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "typeForProperty",
          "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Type to which to deserialize attribute"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2221,
              "column": 6
            },
            "end": {
              "line": 2223,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2235,
              "column": 6
            },
            "end": {
              "line": 2237,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string | function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2252,
              "column": 6
            },
            "end": {
              "line": 2254,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating"
            }
          ],
          "return": {
            "type": "void",
            "desc": "whether method names should be included as a dependency to the effect."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2264,
              "column": 6
            },
            "end": {
              "line": 2266,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2284,
              "column": 6
            },
            "end": {
              "line": 2286,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2296,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2314,
              "column": 6
            },
            "end": {
              "line": 2316,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2330,
              "column": 6
            },
            "end": {
              "line": 2332,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2396,
              "column": 6
            },
            "end": {
              "line": 2402,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n\nThe default implementation uses a regular expression for best\nperformance. However, the regular expression uses a white-list of\nallowed characters in a data-binding, which causes problems for\ndata-bindings that do use characters not in this white-list.\n\nInstead of updating the white-list with all allowed characters,\nthere is a StrictBindingParser (see lib/mixins/strict-binding-parser)\nthat uses a state machine instead. This state machine is able to handle\nall characters. However, it is slightly less performant, therefore we\nextracted it into a separate optional mixin.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2648,
              "column": 6
            },
            "end": {
              "line": 2713,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2729,
              "column": 6
            },
            "end": {
              "line": 2746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
          "privacy": "public",
          "sourceRange": {
            "file": "../polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 138,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "_finalizeClass",
          "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 294,
              "column": 5
            },
            "end": {
              "line": 317,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "createObservers",
          "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 343,
              "column": 6
            },
            "end": {
              "line": 348,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "observers",
              "type": "Object",
              "description": "Array of observer descriptors for\n  this class"
            },
            {
              "name": "dynamicFns",
              "type": "Object",
              "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for a style element in the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 503,
              "column": 6
            },
            "end": {
              "line": 505,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText",
              "type": "string",
              "description": "Text containing styling to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The processed CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 516,
              "column": 6
            },
            "end": {
              "line": 527,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 109,
          "column": 0
        },
        "end": {
          "line": 892,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Polymer.Element",
      "name": "LogicElements.UrlIndexer",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "url-indexer"
    }
  ],
  "classes": [
    {
      "description": "A base class for all models.",
      "summary": "",
      "path": "base-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 2
            },
            "end": {
              "line": 76,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          }
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          }
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          }
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 205,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "ArcBaseModel"
    },
    {
      "description": "A base class for Request and Projects` models.",
      "summary": "",
      "path": "request-base-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "savedDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "historyDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "projectDb",
          "type": "PouchDB",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 74,
              "column": 2
            },
            "end": {
              "line": 76,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes database data by tye.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "getDatabase",
          "description": "Returns a reference to a PouchDB database instance for given type.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "PouchDB",
            "desc": "PouchDB instance for the datastore."
          }
        },
        {
          "name": "readProject",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest\nrevision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          }
        },
        {
          "name": "updateProject",
          "description": "Updates / saves a project object in the datastore.\nThis function fires `project-object-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "project",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          }
        },
        {
          "name": "removeProject",
          "description": "Removed an object from the datastore.\nThis function fires `project-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 2
            },
            "end": {
              "line": 145,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 146,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "RequestBaseModel"
    }
  ]
}
