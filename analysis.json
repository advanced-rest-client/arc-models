{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Events based access to projects datastore.\n\nNote: **All events must be cancelable.** When the event is cancelled by an\ninstance of the element it won't be handled again by other instance that\npossibly exists in the DOM.\n\nCancellable event is a request to models for change. Non-cancellable event\nis a notification for views to update their values.\nFor example `project-object-changed` event notifies model to update object in\nthe datastore if the event is cancelable and to update views if it's not\ncancellable.\n\nEach handled event contains the `result` property on the `detail` object. It\ncontains a `Promise` object with a result of the operation. Also, for update\nor delete events the same non-cancelable event is fired.\n\nEvents handled by this element are cancelled and propagation of the event is\nstopped.\n\nSee model description here:\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/docs/arc-models.md#arcproject\n\nSupported operations:\n\n-   Read project object (`project-read`)\n-   Update name only (`project-name-changed`)\n-   Update project object (`project-object-changed`)\n-   Delete object (`project-object-deleted`)\n-   Query for projects (`project-model-query`)\n\n### Events description\n\n#### `project-read` event\n\nReads a project object from the datastore.\n\n##### Properties\n-   `id` (String, required) ID of the datastore entry\n-   `rev` (String, optional) Specific revision to retrieve from the datastore.\nLatest by default.\n\n##### Example\n\n```javascript\nconst event = new CustomEvent('project-read', {\n   detail: { id: 'some-id' },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(project => console.log(project));\n}\n```\n\n#### `project-object-changed` event\n\nUpdates / saves new object in the datastore.\n\n##### Properties\n\n-   `project` (Object, required) An object to store\n\n##### Example\n\n```javascript\nconst event = new CustomEvent('project-object-changed', {\n   detail: { project: {...} },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(project => console.log(project));\n}\n```\n\n#### `project-object-deleted` event\n\nDeletes the object from the datastore. This operation fires\n`project-object-deleted` custom event. Promise returns object's\nnew `_rev` value.\n\n##### Properties\n-   `id` (String, required) ID of the datastore entry\n-   `rev` (String, optional) The `_rev` property of the PouchDB datastore\nobject. If not set it will use latest revision.\n\n##### Example\n\n```javascript\nconst event = new CustomEvent('project-object-deleted', {\n   detail: { id: 'some-id' },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(newRev => console.log(newRev));\n}\n```\n\n#### `project-model-query` event\n\nReads the list of all projects. Promise resolves to the list of projects.\nThis event doesn't requeire any properties but **the `details` object must be set**.\n\n##### Properties\n\n-   `ids` (Array<String>, optional) If present it only returns data for\nids passed in this array. If the data does not exists in the store anymore\nthis item is `undefined` in the response.\n\n##### Example\n\n```javascript\nconst event = new CustomEvent('project-model-query', {\n   detail: {}, // THIS MUST BE SET\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(list => console.log(list));\n}\n```\n\n#### `project-update-bulk` event\n\nUsed to create / update projects in bulk\n\nIt expects `projects` property to be set on the detail object.\nEach item must be an object at least containing the name. Otherwise the\nobject is ignored.\n\n##### Example\n\n```javascript\nconst event = new CustomEvent('project-update-bulk', {\n   detail: {\n     projects: [{name: 'my project'}]\n   },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(list => console.log(list));\n}\n```",
      "summary": "",
      "path": "project-model.js",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "Useful to generate uuid string.\nUse it as `this.uuid.generate()`.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "savedDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "historyDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "projectDb",
          "type": "PouchDB",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes database data by tye.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "_notifyModelDestroyed",
          "description": "Notifies the application that the model has been removed and data sestroyed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Database name."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Dispatched event"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "Checks if event can be processed giving it's cancelation status or if\nit was dispatched by current element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if event is already cancelled or dispatched by self."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "Helper method to cancel the event and stop it's propagation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to cancel"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "getDatabase",
          "description": "Returns a reference to a PouchDB database instance for given type.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "PouchDB",
            "desc": "PouchDB instance for the datastore."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "readProject",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 80,
              "column": 2
            },
            "end": {
              "line": 86,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest\nrevision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "updateProject",
          "description": "Updates / saves a project object in the datastore.\nThis function fires `project-object-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 106,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "project",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "removeProject",
          "description": "Removed an object from the datastore.\nThis function fires `project-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 116,
              "column": 2
            },
            "end": {
              "line": 135,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "_handleRead",
          "description": "Handler for project read event request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 2
            },
            "end": {
              "line": 228,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createBulkHandler",
          "description": "Handler for `project-update-bulk` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 2
            },
            "end": {
              "line": 244,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_normalizeProjects",
          "description": "Normalizes projects list to common model.\nIt updates `updated` property to current time.\nIf an item is not an object then it is removed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 2
            },
            "end": {
              "line": 271,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "projects",
              "type": "Array.<Object>",
              "description": "List of projects."
            }
          ],
          "return": {
            "type": "Array.<Object>"
          }
        },
        {
          "name": "updateBulk",
          "description": "Updates more than one project in a bulk request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 277,
              "column": 2
            },
            "end": {
              "line": 281,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "projects",
              "type": "Array.<Object>",
              "description": "List of requests to update."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_processUpdateBulkResponse",
          "description": "Processes datastore response after calling `updateBulk()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 2
            },
            "end": {
              "line": 311,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "projects",
              "type": "Array.<Object>",
              "description": "List of requests to update."
            },
            {
              "name": "response",
              "type": "Array.<Object>",
              "description": "PouchDB response"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "List of projects with updated `_id` and `_rew`"
          }
        },
        {
          "name": "listProjects",
          "description": "Lists all project objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 2
            },
            "end": {
              "line": 330,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ids",
              "type": "?Array.<String>",
              "description": "Optional, list of project IDs to limit the\nresponse to specific projects"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved to a list of projects."
          }
        },
        {
          "name": "_handleObjectSave",
          "description": "Handles object save / update",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 2
            },
            "end": {
              "line": 367,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectDelete",
          "description": "Deletes the object from the datastore.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 2
            },
            "end": {
              "line": 385,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_queryHandler",
          "description": "Queries for a list of projects.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 176,
          "column": 0
        },
        "end": {
          "line": 416,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "RequestBaseModel",
      "name": "LogicElements.ProjectModel",
      "attributes": [],
      "events": [
        {
          "type": "CustomEvent",
          "name": "project-object-changed",
          "description": "Fired when the project entity has been saved / updated in the datastore.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "project-object-deleted",
          "description": "project-object-deleted",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "project-model"
    },
    {
      "description": "Event based access to saved and history request datastore.\n\nThis model creates and updates updates request objects and updates\nURL index associated with the request.\nIt also supports querying for request data, deleting request data and\nundeleting it.\n\n## Required dependency\n\nBecause `pouchdb.quick-search` plugin and PouchDB in general is not ES6 ready\nthe plugin has to be included as a regular script and then added as a Plugin to\nPouchDB global instance. This component has `pouchdb.quick-search` as a\ndependency.\n\n```html\n<script src=\"node_modules/pouchdb-quick-search/dist/pouchdb.quick-search.js\"></script>\n<script type=\"module\">\nimport 'node_modules/pouchdb/dist/pouchdb.js';\nPouchDB.plugin(PouchQuickSearch);\n<script>\n```\n\n## Events API\n\nAll events must be marked as cancelable or will be ignore by the model.\nIn ARC ecosystem models dispatch the same event after the object is updated\n(deleted, created, updated) but the event is not cancelable.\nComponents should only react on non cancelable model events as it means\nthat the change has been commited to the datastore.\n\nEach handled event is canceled so it's safe to put more than one model in\nthe DOM. Event's detail object will get `result` property with the promise\nresolved when operation commits.\n\n**save-request**\nThis event should be used when dealing with unprocessed request data.\nRequest object may contain Blob or FormData as a payload which would be lost\nif trying to store it in the data store. This flow handles payload\ntransformation.\n\nDetail's parameteres:\n- request - Required, ArcRequest object\n- projects - Optional, Array of strings, List of project names to create\nwith this request and associate with the request object.\n- options - Optional, map of additional options. Currently only `isDrive` is\nsupported. When set `export-google-drive` is dispatched. If the event is not\nhandled by the application the save flow fails.\n\n```javascript\nconst e = new CustomEvent('save-request', {\n bubbles: true,\n composed: true,\n cancelable: true,\n detail: {\n   request: {...}\n   projects: ['Test project'],\n   options: {\n     isDrive: true\n   }\n }\n};\nthis.dispatchEvent(e);\n```\n\n**request-object-read**\n\nReads the request from the data store.\n\nDetail's parameteres:\n\n- `id` - Required, String. Request ID\n- `type` - Required, String. Either `history` or `saved`\n- `rev` - Optional, String. Specific revision to read\n\n**request-object-changed**\n\nShould be only used if the payload is not `Blob` or `FormData` and\nall request properties are set. By default `save-request` event should be\nused.\n\nDetail's parameteres: ArcRequest object.\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/docs/\narc-models.md#arcrequest\n\n**request-object-deleted**\n\nDeletes the object from the data store.\n\nDetail's parameteres:\n\n- `id` - Required, String. Request ID\n- `type` - Required, String. Either `history` or `saved`\n\n**request-objects-deleted**\n\nDeletes number of requests in bulk.\n\nDetail's parameteres:\n\n- `type` - Required, String. Either `history` or `saved`\n- `items` - Required, Array<String>. List of request IDs to delete.\n\n**request-objects-undeleted**\n\nUsed to restore deleted request data.\n\nDetail's parameteres:\n\n- `type` - Required, String. Either `history` or `saved`\n- `items` - Required, Array<Object>. List of requests to restore.\nEach object must contain `_rev` and `_id`.\n\nThe `result` property contains result of calling `revertRemove()` function.\n\n**request-query**\n\nQueries for request data. This flow searches for URL data in a separate index\nand then performs full text search on the request data store.\n\nDetail's parameteres:\n\n- `q` - Required, String. User query.\n- `type` - Optional, String. Either `history` or `saved`. By default it\nsearches in both data stores.\n- `detailed` - Optional, Boolean. If set it uses slower algorithm but performs full\nsearch on the index. When false it only uses filer like query + '*'.",
      "summary": "",
      "path": "request-model.js",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "Useful to generate uuid string.\nUse it as `this.uuid.generate()`.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "savedDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "historyDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "projectDb",
          "type": "PouchDB",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "historyIndexes",
          "type": "Array.<String>",
          "description": "List of fields to index in the history store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1188,
              "column": 2
            },
            "end": {
              "line": 1190,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "savedIndexes",
          "type": "Array.<String>",
          "description": "List of fields to index in the saved store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1195,
              "column": 2
            },
            "end": {
              "line": 1197,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_attachListeners",
          "description": "Adds event listeners.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "Removes event listeners.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 466,
              "column": 2
            },
            "end": {
              "line": 479,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to\nlatest revision."
            },
            {
              "name": "opts",
              "type": "?Object",
              "description": "Additional options. Currently only `restorePayload`\nis supported"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a project object."
          }
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes database data by tye.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "_notifyModelDestroyed",
          "description": "Notifies the application that the model has been removed and data sestroyed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Database name."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Dispatched event"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes saved or history data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1346,
              "column": 2
            },
            "end": {
              "line": 1358,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "Checks if event can be processed giving it's cancelation status or if\nit was dispatched by current element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if event is already cancelled or dispatched by self."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "Helper method to cancel the event and stop it's propagation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to cancel"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "getDatabase",
          "description": "Returns a reference to a PouchDB database instance for given type.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "PouchDB",
            "desc": "PouchDB instance for the datastore."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "readProject",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 80,
              "column": 2
            },
            "end": {
              "line": 86,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest\nrevision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "updateProject",
          "description": "Updates / saves a project object in the datastore.\nThis function fires `project-object-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 106,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "project",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "removeProject",
          "description": "Removed an object from the datastore.\nThis function fires `project-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.js",
            "start": {
              "line": 116,
              "column": 2
            },
            "end": {
              "line": 135,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "_saveRequestHandler",
          "description": "A handler for `save-request-data` custom event. It's special event to\nsave / update request data dispatched by the request editor.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 244,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createProjects",
          "description": "Create projects from project names.\nIt is used when creating a request with a new project.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 2
            },
            "end": {
              "line": 285,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "names",
              "type": "Array.<String>",
              "description": "Names of projects"
            },
            {
              "name": "requestId",
              "type": "?String",
              "description": "Request ID to add to the projects."
            }
          ],
          "return": {
            "type": "Promise.<Array.<String>>",
            "desc": "Promise resolved to list of project IDs"
          }
        },
        {
          "name": "_saveHistoryHandler",
          "description": "Handler for `save-history` object. It computes payload to savable state\nand saves history object.\nNote, the ID is is a combination of today's midningt timestamp, url and\nmethod. If such ID already exists the object is updated.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 2
            },
            "end": {
              "line": 324,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "saveRequest",
          "description": "Saves a request into a data store.\nIt handles payload to string conversion, handles types, and syncs request\nwith projects. Use `update()` method only if you are storing already\nprepared request object to the store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 2
            },
            "end": {
              "line": 361,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ArcRequest object"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Save request object. Currently only `isDrive`\nis supported"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resilved to updated request object."
          }
        },
        {
          "name": "_syncProjects",
          "description": "Sunchronizes project requests to ensure each project contains this\n`requestId` on their list of requests.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 370,
              "column": 2
            },
            "end": {
              "line": 423,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requestId",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "projects",
              "type": "?Array.<String>",
              "description": "List of request projects."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "normalizeRequest",
          "description": "Normalizes request object to whatever the app is currently using.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 429,
              "column": 2
            },
            "end": {
              "line": 453,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Object"
          }
        },
        {
          "name": "readBulk",
          "description": "The same as `read()` but for a list of requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 488,
              "column": 2
            },
            "end": {
              "line": 508,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Requests type to restore."
            },
            {
              "name": "keys",
              "type": "Array.<String>",
              "description": "Request ids"
            },
            {
              "name": "opts",
              "type": "?Object",
              "description": "Additional options. Currently only `restorePayload`\nis supported"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "update",
          "description": "Updates / saves the request object in the datastore.\nThis function fires `request-object-changed` event.\n\nIf any of `name`, `method`, `url` or `legacyProject` properties change\nthen the old object is deleted and new is created with new ID.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 520,
              "column": 2
            },
            "end": {
              "line": 542,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "request",
              "type": "Object",
              "description": "An object to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to request object with updated `_rev`"
          }
        },
        {
          "name": "updateBulk",
          "description": "Updates more than one request in a bulk.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 549,
              "column": 2
            },
            "end": {
              "line": 582,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "requests",
              "type": "Array.<Object>",
              "description": "List of requests to update."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "List of PouchDB responses to each insert"
          }
        },
        {
          "name": "remove",
          "description": "Removed an object from the datastore.\nThis function fires `request-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 594,
              "column": 2
            },
            "end": {
              "line": 616,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to\nlatest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted\nobject."
          }
        },
        {
          "name": "revertRemove",
          "description": "Reverts deleted items.\nThis function fires `request-object-changed` event for each restored\nrequest.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 628,
              "column": 2
            },
            "end": {
              "line": 659,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "items",
              "type": "Array",
              "description": "List of request objects. Required properties are\n`_id` and `_rev`."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with restored objects. Objects have\nupdated `_rev` property."
          }
        },
        {
          "name": "_findNotDeleted",
          "description": "Finds last not deleted revision of a document.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 666,
              "column": 2
            },
            "end": {
              "line": 691,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object",
              "description": "PouchDB instance"
            },
            {
              "name": "items",
              "type": "Array",
              "description": "List of documents to process"
            }
          ],
          "return": {
            "type": "Promise.<Array>",
            "desc": "Last not deleted version of each document."
          }
        },
        {
          "name": "_findUndeletedRevision",
          "description": "Finds a next revision after the `deletedRevision` in the revisions history\nwhich is the one that reverts any changes made after it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 701,
              "column": 2
            },
            "end": {
              "line": 717,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "revs",
              "type": "Object",
              "description": "PouchDB revision history object"
            },
            {
              "name": "deletedRevision",
              "type": "Object",
              "description": "Revision of deleted object (after delete)."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Revision ID of the object before a change registered in\n`deletedRevision`"
          }
        },
        {
          "name": "_handleRead",
          "description": "Handler for request read event request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 722,
              "column": 2
            },
            "end": {
              "line": 748,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectSave",
          "description": "Handles onject save / update",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 754,
              "column": 2
            },
            "end": {
              "line": 792,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectsSave",
          "description": "Handler for `request-objects-changed` event. Updates requests in bulk operation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 797,
              "column": 2
            },
            "end": {
              "line": 816,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectDelete",
          "description": "Deletes the object from the datastore.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 822,
              "column": 2
            },
            "end": {
              "line": 845,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectsDelete",
          "description": "Queries for a list of projects.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 850,
              "column": 2
            },
            "end": {
              "line": 893,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleUndelete",
          "description": "handlers `request-objects-undeleted` event to restore deleted items",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 898,
              "column": 2
            },
            "end": {
              "line": 918,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_filterExistingItems",
          "description": "Filters query results to return only successfuly read data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 924,
              "column": 2
            },
            "end": {
              "line": 933,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result",
              "type": "Object",
              "description": "PouchDB query result"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "List of request that has been read."
          }
        },
        {
          "name": "_findOldRef",
          "description": "Finds a `_rev` for a doc.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 940,
              "column": 2
            },
            "end": {
              "line": 943,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "docs",
              "type": "Array",
              "description": "List of PouchDB documents to search for `_rev`"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Document ID"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Associated `_rev`"
          }
        },
        {
          "name": "_saveGoogleDrive",
          "description": "Saves the request on Google Drive.\nIt sends `drive-request-save` event to call a component responsible\nfor saving the request.\n\nThis do nothing if `opts.drive is not set.`",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 955,
              "column": 2
            },
            "end": {
              "line": 984,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "Data to save"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Save request options. See `saveRequest` for more info."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to updated object."
          }
        },
        {
          "name": "_handleList",
          "description": "Handler for `request-list` custom event.\nThe `result` property will contain a result of calling `list()` function.\n\nThe event has to be cancelable and not already cancelled in order to handle\nit.\n\nRequired properties on `detail` object:\n- `type` {String} Datastore type\n- `queryOptions` {Object} PouchDB query options.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 998,
              "column": 2
            },
            "end": {
              "line": 1019,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "list",
          "description": "Performs a query for the request data.\n\nThis is not the same as searching for a request. This only lists\ndata from the datastore for given query options.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1030,
              "column": 2
            },
            "end": {
              "line": 1043,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Datastore type"
            },
            {
              "name": "queryOptions",
              "type": "Object",
              "description": "PouchDB query options."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "List of PouchDB documents for the query."
          }
        },
        {
          "name": "_handleQuery",
          "description": "A handler for the `request-query` custom event. Queries the datastore for\nrequest data.\nThe event must have `q` property set on the detail object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1051,
              "column": 2
            },
            "end": {
              "line": 1064,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "query",
          "description": "Queries both URL and PouchDb data.\n\nIt calls, in order, `queryUrlData()` and `queryPouchDb()` functions.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1077,
              "column": 2
            },
            "end": {
              "line": 1084,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "Optional, type of the requests to search for.\nBy default it returns all data."
            },
            {
              "name": "detailed",
              "type": "?Boolean",
              "description": "If set it uses slower algorithm but performs full\nsearch on the index. When false it only uses filer like query + '*'."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "queryUrlData",
          "description": "Performs a query on the URL index data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1096,
              "column": 2
            },
            "end": {
              "line": 1159,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "Optional, type of the requests to search for.\nBy default it returns all data."
            },
            {
              "name": "detailed",
              "type": "?Boolean",
              "description": "If set it uses slower algorithm but performs full\nsearch on the index. When false it only uses filer like query + '*'."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "queryPouchDb",
          "description": "Performs a query on the request and/or history data store.\nIt uses PouchDB `query` function on built indexes.\nNote, it does not query for URL data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1171,
              "column": 2
            },
            "end": {
              "line": 1183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "Optional, type of the requests to search for.\nBy default it returns all data for both history and saved."
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "queryHistory",
          "description": "Queries history store using PouchDB quick search plugin (full text search).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1205,
              "column": 2
            },
            "end": {
              "line": 1207,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "querySaved",
          "description": "Queries Saved store using PouchDB quick search plugin (full text search).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1215,
              "column": 2
            },
            "end": {
              "line": 1217,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "_queryStore",
          "description": "See `query()` function for description.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1226,
              "column": 2
            },
            "end": {
              "line": 1252,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            },
            {
              "name": "db",
              "type": "Object",
              "description": "A handler to the data store."
            },
            {
              "name": "indexes",
              "type": "Array.<String>",
              "description": "List of fields to query"
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "A promise resolved to list of PouchDB docs."
          }
        },
        {
          "name": "indexData",
          "description": "Performs data inding using PouchDB api.\nThis is not the same as URL indexing using `url-indexer`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1260,
              "column": 2
            },
            "end": {
              "line": 1267,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Data type - saved or history."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_listProjectRequestsHandler",
          "description": "Handler for `request-project-list` event to query for list of requests in\na project.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1273,
              "column": 2
            },
            "end": {
              "line": 1285,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "readProjectRequests",
          "description": "Reads list of requests associated with a project",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1293,
              "column": 2
            },
            "end": {
              "line": 1301,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Project id"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Additional options. Currently only `restorePayload`\nis supported"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "readProjectRequestsLegacy",
          "description": "Reads requests data related to the project from a legacy system.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1307,
              "column": 2
            },
            "end": {
              "line": 1318,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Project id"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "sortRequestProjectOrder",
          "description": "Sorts requests list by `projectOrder` property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1326,
              "column": 2
            },
            "end": {
              "line": 1340,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "Object"
            },
            {
              "name": "b",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Number"
          }
        },
        {
          "name": "deleteDataModel",
          "description": "Deletes all data of selected type.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1364,
              "column": 2
            },
            "end": {
              "line": 1376,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "models",
              "type": "(Array.<String> | String)",
              "description": "Database type or list of types."
            }
          ],
          "return": {
            "type": "Array.<Promise>",
            "desc": "List of promises. Might be empty array."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 147,
          "column": 0
        },
        "end": {
          "line": 1435,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "RequestBaseModel",
      "name": "LogicElements.RequestModel",
      "attributes": [],
      "events": [
        {
          "type": "CustomEvent",
          "name": "drive-request-save",
          "description": "Fired when the request should be expored to Google Drive.\nThis element doesn't support this operation but this way it queries for\nan element that can export data to Google Drive.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "export-google-drive",
          "description": "Dispatched when saving request object to the data store and configuration\noption says to save request to Google Drive.\nThis component does not handles the logic responsible for Drive integration.\n\nNote, The request save flow fails when this event is not handled.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-indexing-error",
          "description": "Dispatched when request object indexing finishes with error.\nThis event does not bubbles.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-indexing-finished",
          "description": "Dispatched when request object indexing finishes.\nThis event does not bubbles.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-object-changed",
          "description": "Fired when the project entity has been saved / updated in the datastore.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-object-deleted",
          "description": "request-object-deleted",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-model"
    },
    {
      "description": "An element that saves Request URL in the history and serves list\nof saved URLs.\n\nThe `url-history-query` event expects the `q` property set on the `detail`\nobject. It is passed to the `query()` function and result of calling this\nfunction is set on detail's `result` property.\n\n### Example\n\n```javascript\n\nconst e = new CustomEvent('url-history-query', {\n detail: {\n   q: 'http://mulesoft.com/path/'\n },\n cancelable: true,\n bubbles: true,\n composed: true // if fired in shaddow DOM\n});\ndocument.body.dispatchEvent(e);\n\ne.detail.result.then((urls) => console.log(urls));\n```\n\nThe `url-history-store` requires the `value` property to be set on\nthe `detail` object and it is passed to the `store()` function.\n\n### Example\n\n```javascript\nconst e = new CustomEvent('url-history-store', {\n detail: {\n   value: 'http://mulesoft.com/path/'\n },\n cancelable: true,\n bubbles: true,\n composed: true\n});\ndocument.dispatchEvent(e);\n```\n\nBoth events are cancelled and propagation of the event is stopped.\nTherefore the event should be dispatched with `caneclable` flag set to true.\n\nThe element listens for events on the `window` object so it can be placed\nanywhere in the DOM.\n\n### Example\n\n```html\n<body>\n <url-history-saver></url-history-saver>\n</body>\n```",
      "summary": "",
      "path": "url-history-model.js",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "Useful to generate uuid string.\nUse it as `this.uuid.generate()`.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 2
            },
            "end": {
              "line": 85,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current datastore.\nNote that `name` property must be set before calling this function.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 167,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_notifyModelDestroyed",
          "description": "Notifies the application that the model has been removed and data sestroyed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Database name."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Dispatched event"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "Checks if event can be processed giving it's cancelation status or if\nit was dispatched by current element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if event is already cancelled or dispatched by self."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "Helper method to cancel the event and stop it's propagation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to cancel"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleStore",
          "description": "Handles `url-history-store` custom event and stores an URL in the\ndatastore.\nThe event is canceled and propagation is topped upon handling. The\nevent should be fired with `cancelable` flag set to `true`.\n\nIt calls `store()` function with the `value` property of the `detail`\nobject as an attribute.\n\nIt creates a new `result` property on the `detail` object which is a\nresult of calling `store()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 2
            },
            "end": {
              "line": 115,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "store",
          "description": "It creates new entry if the URL wasn't already in the data store or\nupdates a `time` and `cnt` property of existing item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "A URL to store in the history store."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to the insert response of PouchDB\nobject (`ok`, `id` and `rev` keys)"
          }
        },
        {
          "name": "_handleQuery",
          "description": "Handles the `url-history-query` custom event.\nIt cancels the event and prohibiits bubbling. Therefore the event should be\nfired as a `cancelable`. It adds the `result` property to the `detail`\nobject which carries a Promise that will resolve to a list of PouchDB\ndocumentnts. It is the same as result as for calling `query()` functiuon.\n\nThe event must contain a `q` property with the query string that is passed\nto the `query()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 172,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "query",
          "description": "Gets a list of maching URLs from the datastore.\nList elements are carrying the `url` property with the full\nURL and `cnt` property with number of times this URL has been updated in\nthe data store. `cnt` is used to sort the results.\n\nAdditional properties are regular PouchDB properties like `_id` and `_rev`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 2
            },
            "end": {
              "line": 212,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "A string to search for. It result with entries that url\ncontains (not start with!) a `q`."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a list of history items."
          }
        },
        {
          "name": "_sortFunction",
          "description": "A function used to sort query list items. It relays on two properties that\nare set by query function on array entries: `_time` which is a timestamp of\nthe entry and `cnt` which is number of times the URL has been used.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 222,
              "column": 2
            },
            "end": {
              "line": 240,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "Object"
            },
            {
              "name": "b",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Number"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 74,
          "column": 7
        },
        "end": {
          "line": 241,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.UrlHistoryModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "url-history-model"
    },
    {
      "description": "Events based access to websockets URL history datastore.\n\nNote: **All events must be cancelable.** When the event is cancelled by an instance\nof the element it won't be handled again by other instance that possibly exists\nin the DOM.\n\nCancellable event is a request to models for change. Non-cancellable event\nis a notification for views to update their values.\nFor example `request-object-changed` event notifies model to update object in\nthe datastore if the event is cancelable and to update views if it's not\ncancellable.\n\nEach handled event contains the `result` property on the `detail` object. It\ncontains a `Promise` object with a result of the operation. Also, for update / delete\nevents the same non-cancelable event is fired.\n\nEvents handled by this element are cancelled and propagation of the event is\nstopped.",
      "summary": "",
      "path": "websocket-url-history-model.js",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "Useful to generate uuid string.\nUse it as `this.uuid.generate()`.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current datastore.\nNote that `name` property must be set before calling this function.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 167,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_notifyModelDestroyed",
          "description": "Notifies the application that the model has been removed and data sestroyed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Database name."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Dispatched event"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "Checks if event can be processed giving it's cancelation status or if\nit was dispatched by current element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if event is already cancelled or dispatched by self."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "Helper method to cancel the event and stop it's propagation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to cancel"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleRead",
          "description": "Handles the read object event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 82,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "update",
          "description": "Updates / saves the object in the datastore.\nThis function fires `websocket-url-history-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          }
        },
        {
          "name": "_handleQueryHistory",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 2
            },
            "end": {
              "line": 133,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleQuery",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 2
            },
            "end": {
              "line": 148,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "list",
          "description": "Lists websocket history objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 2
            },
            "end": {
              "line": 172,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "query",
              "type": "?String",
              "description": "A partial url to match results."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved to a list of PouchDB documents."
          }
        },
        {
          "name": "_sortFunction",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 2
            },
            "end": {
              "line": 192,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_computeTime",
          "description": "Computes time for timestamp's day, month and year and time set to 0.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 2
            },
            "end": {
              "line": 201,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Database entry item."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The same database item with `_time` property."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 38,
          "column": 7
        },
        "end": {
          "line": 202,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.WebsocketUrlHistoryModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "websocket-url-history-model"
    },
    {
      "description": "Events based access to REST APIs datastore.",
      "summary": "",
      "path": "rest-api-model.js",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "Useful to generate uuid string.\nUse it as `this.uuid.generate()`.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "indexDb",
          "type": "?",
          "description": "A handler to the datastore. Contains listing data.\n   ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 2
            },
            "end": {
              "line": 82,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "dataDb",
          "type": "?",
          "description": "A handler to the datastore containing REST API data\n(AMF model).\n   ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 2
            },
            "end": {
              "line": 89,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 2
            },
            "end": {
              "line": 63,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 2
            },
            "end": {
              "line": 75,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current datastore.\nNote that `name` property must be set before calling this function.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 167,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_notifyModelDestroyed",
          "description": "Notifies the application that the model has been removed and data sestroyed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Database name."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Dispatched event"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes saved or history data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 543,
              "column": 2
            },
            "end": {
              "line": 560,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "Checks if event can be processed giving it's cancelation status or if\nit was dispatched by current element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if event is already cancelled or dispatched by self."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "Helper method to cancel the event and stop it's propagation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to cancel"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "readIndex",
          "description": "Reads an entry from the index datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 104,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a project object."
          }
        },
        {
          "name": "readData",
          "description": "Reads an entry from the raml data datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 2
            },
            "end": {
              "line": 118,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a project object."
          }
        },
        {
          "name": "updateData",
          "description": "Creates / updates API data object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "indexId",
              "type": "String",
              "description": "Id of the index object"
            },
            {
              "name": "version",
              "type": "String",
              "description": "Version of the API data"
            },
            {
              "name": "data",
              "type": "Object",
              "description": "AMF model to store"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a document with updated `_rev`"
          }
        },
        {
          "name": "updateIndex",
          "description": "Creates / updates API index object.\nThe `_id` property must be already set on the object.\n\nThis function fires `api-index-changed` custom event on success.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "doc",
              "type": "Object",
              "description": "PouchDB document."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a document with updated `_rev`"
          }
        },
        {
          "name": "updateIndexBatch",
          "description": "Updates many index objects in one request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "docs",
              "type": "Array.<Object>",
              "description": "List of PouchDB documents to update."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a list of document with updated `_rev`"
          }
        },
        {
          "name": "remove",
          "description": "Removes all AMF and index data from datastores for given index id.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 2
            },
            "end": {
              "line": 233,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Index entry ID to delete."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          }
        },
        {
          "name": "removeVersion",
          "description": "Removes information about version from AMD data datastore and from index\ndata.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 2
            },
            "end": {
              "line": 264,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Index object ID"
            },
            {
              "name": "version",
              "type": "String",
              "description": "Version to remove."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "removeVersions",
          "description": "Removes versions of API data in bulk operation.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 2
            },
            "end": {
              "line": 277,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "indexId",
              "type": "String",
              "description": "Index object ID"
            },
            {
              "name": "versions",
              "type": "Array.<String>",
              "description": "List of versions to remove."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_removeVersions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 2
            },
            "end": {
              "line": 286,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ids"
            }
          ]
        },
        {
          "name": "_removeVersion",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 2
            },
            "end": {
              "line": 311,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "listIndex",
          "description": "Lists index data.\n\n### QueryResultObject\n- `data` {Array<Object>} List of PouchDB documents read from the datastore\n- `nextPageToken` {String} Pagination string to be used with next call\nto get resutls for a next page. The nextPageToken don't change over\nsubsequent requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 2
            },
            "end": {
              "line": 349,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opts",
              "type": "Object",
              "description": "Query options:\n- nextPageToken {String} Received from previous query page token."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved to a query result object on success."
          }
        },
        {
          "name": "_makeNextPageToken",
          "description": "Generates `nextPageToken` as a random string.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 355,
              "column": 2
            },
            "end": {
              "line": 362,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "String",
            "desc": "Random 32 characters long string."
          }
        },
        {
          "name": "_indexChangeHandler",
          "description": "A handler for `api-index-changed` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 368,
              "column": 2
            },
            "end": {
              "line": 380,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_readHandler",
          "description": "Handler for the `api-data-read` custom event.\n\nEvent `detail` object must contain the `id` property with datastore entry\nid and may contain a `rev` property to read a specific revision.\n\nIt sets a `result` property on the event `detail` object that is a\npromise returned by `readData()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 392,
              "column": 2
            },
            "end": {
              "line": 405,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_readIndexHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 407,
              "column": 2
            },
            "end": {
              "line": 424,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dataUpdateHandler",
          "description": "Handler for the `api-data-changed` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 430,
              "column": 2
            },
            "end": {
              "line": 451,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deletedHandler",
          "description": "Deletes the object from the datastores.\nIt is only handled if the event in cancelable and not cancelled.\n\nEvent has to have `id` property set on the detail object.\n\nIt sets `result` property on the event detail object with a result of\ncalling `remove()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 2
            },
            "end": {
              "line": 475,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_versionDeletedHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 477,
              "column": 2
            },
            "end": {
              "line": 494,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexesUpdatedHandler",
          "description": "Handler for the `api-index-changed-batch` custom event.\nIt requires to have `items` property set to event detail as an array of\nPouchDB documents to update.\n\nIt sets `result` property on the event detail object with a result of\ncalling `updateIndexBatch()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 505,
              "column": 2
            },
            "end": {
              "line": 523,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexListHandler",
          "description": "Handler for the `api-index-list` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 529,
              "column": 2
            },
            "end": {
              "line": 537,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_delIndexModel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 562,
              "column": 2
            },
            "end": {
              "line": 565,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_delDataModel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 567,
              "column": 2
            },
            "end": {
              "line": 570,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 38,
          "column": 7
        },
        "end": {
          "line": 606,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.RestApiModel",
      "attributes": [],
      "events": [
        {
          "type": "CustomEvent",
          "name": "api-data-changed",
          "description": "Fired when RAML (API) data has been updated.\nThe event is non cancelable which means that the change is commited to the\ndatastore.\n\nIt sets a `result` property on event `detail` object which contains a return\nvalue from calling `updateData()` function.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "api-deleted",
          "description": "Fired when data has been deleted.\nThe event is non cancelable which means that the change is commited to the\ndatastore.\n\nIt sets a `result` property on event `detail` object which contains a return\nvalue from calling `remove()` function.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "api-index-changed",
          "description": "Fired when index data has been updated.\nThe event is non cancelable which means that the change is commited to the\ndatastore.\n\nIt sets a `result` property on event `detail` object which contains a return\nvalue from calling `updateIndex()` function.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "rest-api-model"
    },
    {
      "description": "Model for host rules.\n\nAvailable events:\n\n- `host-rules-insert` Bulk add hosts\n- `host-rules-changed` Change / add record\n- `host-rules-deleted` Remove record\n- `host-rules-list` Lists all rules\n- `host-rules-clear` Clears hosts datastore\n\nEach event must be cancelable or it will be ignored.\nThe insert, change and delete events dispatches non cancelable update/delete\nevents. Application should listen for this events to update it's state.",
      "summary": "",
      "path": "host-rules-model.js",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "Useful to generate uuid string.\nUse it as `this.uuid.generate()`.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 50,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 59,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current datastore.\nNote that `name` property must be set before calling this function.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 167,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_notifyModelDestroyed",
          "description": "Notifies the application that the model has been removed and data sestroyed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Database name."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Dispatched event"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "Checks if event can be processed giving it's cancelation status or if\nit was dispatched by current element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if event is already cancelled or dispatched by self."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "Helper method to cancel the event and stop it's propagation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to cancel"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "update",
          "description": "Updates / saves the host rule object in the datastore.\nThis function fires `host-rules-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 79,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule",
              "type": "Object",
              "description": "A rule object to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to updated object with updated `_rev`"
          }
        },
        {
          "name": "updateBulk",
          "description": "Updates / saves the host rule object in the datastore.\nThis function fires `host-rules-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 2
            },
            "end": {
              "line": 113,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rules",
              "type": "Array.<Object>",
              "description": "List of rules to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to the result of Pouch DB operation"
          }
        },
        {
          "name": "remove",
          "description": "Removed an object from the datastore.\nThis function fires `host-rules-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 2
            },
            "end": {
              "line": 142,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          }
        },
        {
          "name": "list",
          "description": "Lists all existing host rules",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 2
            },
            "end": {
              "line": 162,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to list of the host rules"
          }
        },
        {
          "name": "_insertHandler",
          "description": "Handler for `host-rules-insert` custom event. Creates rules in bulk.\nIt sets `result` property on event detail object with a result of calling\n`updateBulk()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updatedHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 2
            },
            "end": {
              "line": 216,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deletedHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 2
            },
            "end": {
              "line": 233,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_listHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 2
            },
            "end": {
              "line": 243,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 2
            },
            "end": {
              "line": 255,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 33,
          "column": 7
        },
        "end": {
          "line": 256,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.HostRulesModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "host-rules-model"
    },
    {
      "description": "Model for variables\n\nAvailable events:\n\n- `environment-read` Read environment object\n- `environment-updated` Change / add record\n- `environment-deleted` Remove record\n- `environment-list-variables` List variables for an environment\n- `environment-list` List variables\n- `variable-updated` - Add / update variable\n- `variable-deleted` - Delete variable\n- `destroy-model` - Delete model action\n\nEach event must be cancelable or it will be ignored.\nThe insert, change and delete events dispatches non cancelable update/delete\nevents. Application should listen for this events to update it's state.",
      "summary": "",
      "path": "variables-model.js",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "Useful to generate uuid string.\nUse it as `this.uuid.generate()`.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "environmentDb",
          "type": "Object",
          "description": "Handler to the environments database.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 2
            },
            "end": {
              "line": 78,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "variableDb",
          "type": "Object",
          "description": "Handler to the variables database.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 86,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current datastore.\nNote that `name` property must be set before calling this function.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 167,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_notifyModelDestroyed",
          "description": "Notifies the application that the model has been removed and data sestroyed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Database name."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Dispatched event"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes saved or history data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 529,
              "column": 2
            },
            "end": {
              "line": 545,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "Checks if event can be processed giving it's cancelation status or if\nit was dispatched by current element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if event is already cancelled or dispatched by self."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "Helper method to cancel the event and stop it's propagation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to cancel"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_envReadHandler",
          "description": "Handler for `environment-read` custom event.\nReads environment onject info by it's name.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_envUpdateHandler",
          "description": "A handler for the `environment-updated` custom event.\nUpdates the environment in the data store.\n\nThe `environment-updated` custom event should be cancellable or the event\nwon't be handled at all.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 2
            },
            "end": {
              "line": 121,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateEnvironment",
          "description": "Updates environment value.\n\nIf the `value` doesn't contains the `_id` property a new environment is\ncreated. The `_rev` property is always updated to the latest value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "A PouchDB object to be stored. It should contain the\n`_id` property if the object is about to be updated. If the `_id` doesn't\nexists a new object is created."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "__updateEnvironmentName",
          "description": "A special case when the name of the environment changes.\nIt updates any related to this environment variables.\n\nIf this is current environment it also changes its name.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 2
            },
            "end": {
              "line": 214,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "oldName",
              "type": "String",
              "description": "Name of the environment befoe the change"
            },
            {
              "name": "data",
              "type": "String",
              "description": "Updated data store entry"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_envDeleteHandler",
          "description": "A handler for the `environment-deleted` custom event.\nDeletes a variable in the data store.\n\nThe `environment-deleted` custom event should be cancellable or the event\nwon't be handled at all.\n\nThe delete function fires non cancellable `environment-deleted` custom\nevent so the UI components can use it to update their values.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 2
            },
            "end": {
              "line": 233,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteEnvironment",
          "description": "Deletes an environment from the data store.\n\nAfter updating the data store this method sends the `environment-deleted`\nevent that can't be cancelled so other managers that are present in the DOM\nwill not update the value again. If you don't need updated `_rev` you don't\nhave to listen for this event.\n\nBecause this function changes the `environments` array the\n`environments-list-changed` event is fired alongside the `environment-deleted`\nevent.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 2
            },
            "end": {
              "line": 282,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "Object",
              "description": "The PouchDB `_id` property of the object to delete."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_deleteEnvironmentVariables",
          "description": "To be called after the environment has been deleted. It clears variables\nfor the environment.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 290,
              "column": 2
            },
            "end": {
              "line": 319,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "environment",
              "type": "String",
              "description": "The environment name."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_envListHandler",
          "description": "A handler for the `environment-list` custom event.\nAdds a `value` propety of the event `detail` object with the array of the\nuser defined environments objects. Each item is a PouchDb data store item\n(with `_id` and `_rev`).\n\nThe `value` set on the details object can be undefined if the user haven't\ndefined any environments or if the manager haven't restored the list yet.\nIn the later case the event target element should listen for\n`environments-list-changed` event to update the list of available environments.\n\nThe `environment-current` custom event should be cancellable or the event\nwon't be handled at all.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 2
            },
            "end": {
              "line": 342,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "listEnvironments",
          "description": "Lists all user defined environments.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 348,
              "column": 2
            },
            "end": {
              "line": 355,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with the list of environments."
          }
        },
        {
          "name": "_varListHandler",
          "description": "A handler for the `variable-list` custom event.\n\nAdds a `value` propety of the event `detail` object with the array of the\nvariables restored for current environment. Each item is a PouchDb data\nstore item (with `_id` and `_rev`).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 2
            },
            "end": {
              "line": 371,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "listVariables",
          "description": "Refreshes list of variables for the `environment`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 2
            },
            "end": {
              "line": 396,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "environment",
              "type": "?String",
              "description": "Name of the environment to get the variables\nfrom. If not set then `default` fill be used."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with the list of variables for the\nenvironment."
          }
        },
        {
          "name": "_varUpdateHandler",
          "description": "A handler for the `variable-updated` custom event.\nUpdates the variable in the data store.\n\nThe `variable-updated` custom event should be cancellable or the event\nwon't be handled at all.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 406,
              "column": 2
            },
            "end": {
              "line": 412,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateVariable",
          "description": "Updates a variable value.\n\nIf the `value` doesn't contains the `_id` property a new variable will\nbe created. The `_rev` property will be always updated to the latest value\nso there's no need to set it on the object.\n\nAfter saving the data this method sends the `variable-updated` event that\ncan't be cancelled so other managers that are present in the DOM will not\nupdate the value again.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 429,
              "column": 2
            },
            "end": {
              "line": 466,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "A PouchDB object to be stored. It should contain the\n`_id` property if the object is about to be updated. If the `_id` doesn't\nexists a new object is created."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_varDeleteHandler",
          "description": "Deletes a variable from the data store.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 475,
              "column": 2
            },
            "end": {
              "line": 481,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "Optional. If it is called from the event handler, this\nis the event object. If initial validation fails then it will set `error`\nproperty on the `detail` object."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteVariable",
          "description": "Deletes a variable from the data store.\n\nAfter updating the data store this method sends the `variable-deleted`\nevent that can't be cancelled so other managers that are present in the DOM\nwill not update the value again. If you don't need updated `_rev` you don't\nhave to listen for this event.\n\nBecause this function changes the `variables` array the\n`variables-list-changed` event is fired alongside the `variable-deleted`\nevent.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 498,
              "column": 2
            },
            "end": {
              "line": 523,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "Object",
              "description": "The PouchDB `_id` property of the object to delete."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_delVariablesModel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 547,
              "column": 2
            },
            "end": {
              "line": 550,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_delEnvironmentsModel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 552,
              "column": 2
            },
            "end": {
              "line": 555,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 36,
          "column": 7
        },
        "end": {
          "line": 556,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.VariablesModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "variables-model"
    },
    {
      "description": "Model for host rules.",
      "summary": "",
      "path": "auth-data-model.js",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "Useful to generate uuid string.\nUse it as `this.uuid.generate()`.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 2
            },
            "end": {
              "line": 33,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 2
            },
            "end": {
              "line": 39,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current datastore.\nNote that `name` property must be set before calling this function.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 167,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_notifyModelDestroyed",
          "description": "Notifies the application that the model has been removed and data sestroyed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Database name."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Dispatched event"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "Checks if event can be processed giving it's cancelation status or if\nit was dispatched by current element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if event is already cancelled or dispatched by self."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "Helper method to cancel the event and stop it's propagation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to cancel"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_queryHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 49,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "query",
          "description": "Queries for a datastore entry. Similar to `read()` but without using `id`\nbut rather the URL.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "The URL of the request"
            },
            {
              "name": "authMethod",
              "type": "String",
              "description": "The Authorization method to restore data for."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_updateHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 78,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "update",
          "description": "Creates or updates the auth data in the data store for given method and URl.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 118,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "The URL of the request"
            },
            {
              "name": "authMethod",
              "type": "String",
              "description": "The Authorization method to restore data for."
            },
            {
              "name": "authData",
              "type": "Object",
              "description": "The authorization data to store. Schema depends on\nthe `authMethod` property. From model standpoint schema does not matter."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_normalizeUrl",
          "description": "Removes query parameters and the fragment part from the URL",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 2
            },
            "end": {
              "line": 141,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "URL to process"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Canonical URL."
          }
        },
        {
          "name": "_computeKey",
          "description": "Computes the database key for auth data",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 155,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "method",
              "type": "String",
              "description": "The Authorization method to restore data for."
            },
            {
              "name": "url",
              "type": "?String",
              "description": "The URL of the request"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Datastore key for auth data"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 7
        },
        "end": {
          "line": 156,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.AuthDataModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "auth-data-model"
    },
    {
      "description": "An element responsible for indexing and querying for URL data.\n\nTo index an URL it requires the following properties:\n- url - the URL to index\n- id - datastore id of referenced object\n- type - type of the object - it's data store name. Type is returned\nwith query results.\n\nIt queries for indexed data by looking into URL structure. When the query\nresult is ready it returns ordered list of results (by relevance) with\n`id` (referenced object), and `type`. The query function do not read the\ndata from referenced data store.\n\nThe component is used to cooperate with saved/history request data model\nand with REST APIs model. However it can index any URL.\n\nThe component automatically handles request update/delete events to index or\nremove index of a request object.\n\n## Usage\n\n### Storing URL data\n\n```javascript\nconst e = new CustomEvent('url-index-update', {\n composed: true,\n bubbles: true,\n cancelable: true,\n detail: {\n   data: [{\n     id: 'xxx',\n     type: 'saved-requests',\n     url: 'https://domain.com'\n   }]\n }\n});\nthis.dispatchEvent(e);\ne.detail.result\n.then((result) => {\n console.log(result);\n});\n```\n\nor directly on the component:\n\n```javascript\nconst node = document.querySelector('url-indexer');\nnode.index([{\n id: 'xxx',\n type: 'saved',\n url: 'https://domain.com'\n}])\n.then((result) => {});\n```\n\n### Querying for data\n\n```javascript\nconst e = new CustomEvent('url-index-query', {\n composed: true,\n bubbles: true,\n cancelable: true,\n detail: {\n   q: 'https://...',\n   type: 'saved', // optional\n   detailed: false // Optional, default to `false`\n }\n});\nthis.dispatchEvent(e);\ne.detail.result\n.then((result) => {\n console.log(result);\n});\n```\n\nor direct call:\n\n```javascript\nconst node = document.querySelector('url-indexer');\nnode.query('https://...', {\n type: 'saved-requests', // optional\n detailed: false // Optional, default to `false`\n})\n.then((result) => {});\n```\nSee query method for description of parameters.",
      "summary": "",
      "path": "url-indexer.js",
      "properties": [
        {
          "name": "uuid",
          "type": "Element",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "indexStoreName",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "indexStoreVersion",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 2
            },
            "end": {
              "line": 124,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexUpdateHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 2
            },
            "end": {
              "line": 162,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexQueryHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_normalizeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "_requestChangeHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 195,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexDebounce",
          "description": "Calles index function with debouncer.\nThe debouncer runs the queue after 25 ms. Bulk operations should be called\nonece unless there's a lot of data to process.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 2
            },
            "end": {
              "line": 232,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "url",
              "type": "String",
              "description": "Request URL"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type (saved or history)"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_requestDeleteHandler",
          "description": "Handler for `request-object-deleted` custom event.\nIt expects `id` property to be set on event detail object.\nCancelable events are ignored.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 2
            },
            "end": {
              "line": 244,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deleteIndexDebounce",
          "description": "Calles deleteIndexedData function with debouncer.\nThe debouncer runs the queue after 25 ms. Bulk operations should be called\nonece unless there's a lot of data to process.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 252,
              "column": 2
            },
            "end": {
              "line": 272,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deleteModelHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 2
            },
            "end": {
              "line": 292,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "openSearchStore",
          "description": "Opens search index data store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 2
            },
            "end": {
              "line": 317,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "createSchema",
          "description": "Creates a database schema when is newly created.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 2
            },
            "end": {
              "line": 330,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "Database create request event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "index",
          "description": "Indexes request data in dedicated index store for requests.\n\nEach item on the `requests` list must contain:\n- `id` - stored object ID (returned by the query)\n- `type` - store name or identifier (returned by the query)\n- `url` - the URL to index",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 2
            },
            "end": {
              "line": 364,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requests",
              "type": "Array",
              "description": "List of requests to index."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_processIndexedRequests",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 2
            },
            "end": {
              "line": 380,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requests"
            },
            {
              "name": "map"
            }
          ]
        },
        {
          "name": "_notifyIndexFinished",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 382,
              "column": 2
            },
            "end": {
              "line": 387,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteIndexedData",
          "description": "Removes indexed data for given requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 394,
              "column": 2
            },
            "end": {
              "line": 413,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ids",
              "type": "Array.<String>",
              "description": "List of request ids to remove."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "deleteIndexedType",
          "description": "Removes indexed data for given `type`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 420,
              "column": 2
            },
            "end": {
              "line": 444,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "`history` or `saved`"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "clearIndexedData",
          "description": "Removes all indexed data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 450,
              "column": 2
            },
            "end": {
              "line": 466,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_getIndexedDataAll",
          "description": "Retreives index data for requests.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 484,
              "column": 2
            },
            "end": {
              "line": 516,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object",
              "description": "Database reference"
            },
            {
              "name": "ids",
              "type": "Array.<String>",
              "description": "List of request ids"
            }
          ],
          "return": {
            "type": "Promise.<Object>",
            "desc": "A map where keys are request IDs and values are\nan array of index data.\n```\n{\n \"[request-id]\": [{\n   \"id\": \"...\",\n   \"requestId\": [request-id],\n   \"url\": \"...\",\n   \"type\": \"...\"\n  }]\n}\n```"
          }
        },
        {
          "name": "_prepareRequestIndexData",
          "description": "Prepares a list of objects to put into the indexeddb to index the request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 523,
              "column": 2
            },
            "end": {
              "line": 556,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "Request object with `id` and `url` properties"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "List of already indexed properties"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "A list of objects to store"
          }
        },
        {
          "name": "_generateId",
          "description": "Generates ID for URL index object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 563,
              "column": 2
            },
            "end": {
              "line": 565,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "URL to search for. It should be lower case"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            }
          ],
          "return": {
            "type": "String"
          }
        },
        {
          "name": "_createIndexIfMissing",
          "description": "Creates an index datastore object if it doesn't exists in the list\nof indexed items.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 576,
              "column": 2
            },
            "end": {
              "line": 591,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "URL to search for."
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Index object to store or `undefined` if already\nindexed."
          }
        },
        {
          "name": "_getUrlObject",
          "description": "Creates an index object for the whole url, if it doesn't exists in already\nindexed data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 601,
              "column": 2
            },
            "end": {
              "line": 604,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "The request object to index"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object to store or `undefined` if the object\nalready exists."
          }
        },
        {
          "name": "_getAuthorityPath",
          "description": "Creates an index object for authority part of the url,\nif it doesn't exists in already indexed data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 616,
              "column": 2
            },
            "end": {
              "line": 619,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parser",
              "type": "URL",
              "description": "Instance of URL object"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object to store or `undefined` if the object\nalready exists."
          }
        },
        {
          "name": "_getPathQuery",
          "description": "Creates an index object for path part of the url,\nif it doesn't exists in already indexed data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 631,
              "column": 2
            },
            "end": {
              "line": 634,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parser",
              "type": "URL",
              "description": "Instance of URL object"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object to store or `undefined` if the object\nalready exists."
          }
        },
        {
          "name": "_getQueryString",
          "description": "Creates an index object for query string of the url,\nif it doesn't exists in already indexed data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 646,
              "column": 2
            },
            "end": {
              "line": 653,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parser",
              "type": "URL",
              "description": "Instance of URL object"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Object to store or `undefined` if the object\nalready exists."
          }
        },
        {
          "name": "_appendQueryParams",
          "description": "Creates an index object for each query parameter of the url,\nif it doesn't exists in already indexed data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 664,
              "column": 2
            },
            "end": {
              "line": 676,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parser",
              "type": "URL",
              "description": "Instance of URL object"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Request type"
            },
            {
              "name": "indexed",
              "type": "Array.<Object>",
              "description": "Already indexed data."
            },
            {
              "name": "target",
              "type": "Array.<Object>",
              "description": "A list where to put generated data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_storeIndexes",
          "description": "Stores indexes in the data store.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 685,
              "column": 2
            },
            "end": {
              "line": 699,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object"
            },
            {
              "name": "indexes",
              "type": "Array.<Object>",
              "description": "List of indexes to store."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "window"
          }
        },
        {
          "name": "_removeRedundantIndexes",
          "description": "Removes indexed items that are no longer relevant for the request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 706,
              "column": 2
            },
            "end": {
              "line": 720,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object"
            },
            {
              "name": "items",
              "type": "Array.<Object>",
              "description": "List of datastore index items."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "query",
          "description": "Queries for indexed data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 731,
              "column": 2
            },
            "end": {
              "line": 742,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "query",
              "type": "String",
              "description": "The query"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Search options:\n- type (string: saved || history): Request type\n- detailed (Booelan): If set it uses slower algorithm but performs full\nsearch on the index. When false it only uses filer like query + '*'."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_searchIndexOf",
          "description": "Performance search on the data store using `indexOf` on the primary key.\nThis function is slower than `_searchCasing` but much, much faster than\nother ways to search for this data.\nIt allows to perform a search on the part of the url only like:\n`'*' + q + '*'` while `_searchCasing` only allows `q + '*'` type search.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 755,
              "column": 2
            },
            "end": {
              "line": 800,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object",
              "description": "Reference to the database"
            },
            {
              "name": "q",
              "type": "String",
              "description": "A string to search for"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "A type of the request to include into results."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_searchCasing",
          "description": "Uses (in most parts) algorithm described at\nhttps://www.codeproject.com/Articles/744986/How-to-do-some-magic-with-indexedDB\nDistributed under Apache 2 license\n\nThis is much faster than `_searchIndexOf` function. However may not find\nsome results. For ARC it's a default search function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 814,
              "column": 2
            },
            "end": {
              "line": 864,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object",
              "description": "Reference to the database"
            },
            {
              "name": "q",
              "type": "String",
              "description": "A string to search for"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "A type of the request to include into results."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_nextCasing",
          "description": "https://www.codeproject.com/Articles/744986/How-to-do-some-magic-with-indexedDB\nDistributed under Apache 2 license",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 874,
              "column": 2
            },
            "end": {
              "line": 908,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "[description]"
            },
            {
              "name": "lowerKey",
              "type": "String",
              "description": "[description]"
            },
            {
              "name": "upperNeedle",
              "type": "String",
              "description": "[description]"
            },
            {
              "name": "lowerNeedle",
              "type": "String",
              "description": "[description]"
            }
          ],
          "return": {
            "type": "(String | undefined)"
          }
        },
        {
          "name": "reindex",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 910,
              "column": 2
            },
            "end": {
              "line": 918,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "reindexSaved",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 920,
              "column": 2
            },
            "end": {
              "line": 943,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "reindexHistory",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 945,
              "column": 2
            },
            "end": {
              "line": 967,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 106,
          "column": 0
        },
        "end": {
          "line": 968,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "LogicElements.UrlIndexer",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "url-indexer"
    }
  ],
  "classes": [
    {
      "description": "A base class for all models.",
      "summary": "",
      "path": "base-model.js",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {},
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 32
            }
          },
          "metadata": {},
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "Useful to generate uuid string.\nUse it as `this.uuid.generate()`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 75,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 79,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          }
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          }
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          }
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteModel",
          "description": "Deletes current datastore.\nNote that `name` property must be set before calling this function.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 167,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_notifyModelDestroyed",
          "description": "Notifies the application that the model has been removed and data sestroyed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Database name."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Dispatched event"
          }
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "Checks if event can be processed giving it's cancelation status or if\nit was dispatched by current element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if event is already cancelled or dispatched by self."
          }
        },
        {
          "name": "_cancelEvent",
          "description": "Helper method to cancel the event and stop it's propagation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to cancel"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 7
        },
        "end": {
          "line": 227,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "ArcBaseModel"
    },
    {
      "description": "A base class for Request and Projects` models.",
      "summary": "",
      "path": "request-base-model.js",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {},
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 32
            }
          },
          "metadata": {},
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "Element",
          "description": "Useful to generate uuid string.\nUse it as `this.uuid.generate()`.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "savedDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "historyDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "projectDb",
          "type": "PouchDB",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@advanced-rest-client/events-target-mixin/events-target-mixin.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "EventsTargetMixin"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 75,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 79,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes database data by tye.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_notifyModelDestroyed",
          "description": "Notifies the application that the model has been removed and data sestroyed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Database name."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Dispatched event"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "Checks if event can be processed giving it's cancelation status or if\nit was dispatched by current element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if event is already cancelled or dispatched by self."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "Helper method to cancel the event and stop it's propagation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.js",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 226,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Event | CustomEvent)",
              "description": "Event to cancel"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "getDatabase",
          "description": "Returns a reference to a PouchDB database instance for given type.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "PouchDB",
            "desc": "PouchDB instance for the datastore."
          }
        },
        {
          "name": "readProject",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 2
            },
            "end": {
              "line": 86,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest\nrevision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          }
        },
        {
          "name": "updateProject",
          "description": "Updates / saves a project object in the datastore.\nThis function fires `project-object-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 106,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "project",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          }
        },
        {
          "name": "removeProject",
          "description": "Removed an object from the datastore.\nThis function fires `project-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 2
            },
            "end": {
              "line": 135,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 7
        },
        "end": {
          "line": 136,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "RequestBaseModel"
    }
  ]
}
