{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Events based access to projects datastore.\n\nNote: **All events must be cancelable.** When the event is cancelled by an\ninstance of the element it won't be handled again by other instance that\npossibly exists in the DOM.\n\nCancellable event is a request to models for change. Non-cancellable event\nis a notification for views to update their values.\nFor example `project-object-changed` event notifies model to update object in\nthe datastore if the event is cancelable and to update views if it's not\ncancellable.\n\nEach handled event contains the `result` property on the `detail` object. It\ncontains a `Promise` object with a result of the operation. Also, for update\n/ delete events the same non-cancelable event is fired.\n\nEvents handled by this element are cancelled and propagation of the event is\nstopped.\n\nSee model description here:\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/docs/\narc-models.md#arcproject\n\nSupported operations:\n\n-   Read project object (`project-read`)\n-   Update name only (`project-name-changed`)\n-   Update project object (`project-object-changed`)\n-   Delete object (`project-object-deleted`)\n-   Query for projects (`project-model-query`)\n\n### Events description\n\n#### `project-read` event\n\nReads a project object from the datastore.\n\n##### Properties\n-   `id` (String, required) ID of the datastore entry\n-   `rev` (String, optional) Specific revision to retrieve from the datastore.\nLatest by default.\n\n##### Example\n\n```javascript\nvar event = new CustomEvent('project-read', {\n   detail: { id: 'some-id' },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(project => console.log(project));\n}\n```\n\n#### `project-object-changed` event\n\nUpdates / saves new object in the datastore.\n\n##### Properties\n\n-   `project` (Object, required) An object to store\n\n##### Example\n\n```javascript\nvar event = new CustomEvent('project-object-changed', {\n   detail: { project: {...} },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(project => console.log(project));\n}\n```\n\n#### `project-object-deleted` event\n\nDeletes the object from the datastore. This operation fires\n`project-object-deleted` custom event. Promise returns object's\nnew `_rev` value.\n\n##### Properties\n-   `id` (String, required) ID of the datastore entry\n-   `rev` (String, optional) The `_rev` property of the PouchDB datastore\nobject. If not set it will use latest revision.\n\n##### Example\n\n```javascript\nvar event = new CustomEvent('project-object-deleted', {\n   detail: { id: 'some-id' },\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(newRev => console.log(newRev));\n}\n```\n\n#### `project-model-query` event\n\nReads the list of all projects. Promise resolves to the list of projects.\nThis event doesn't requeire any properties but **the `details` object must be set**.\n\n##### Properties\n\n-   `ids` (Array<String>, optional) If present it only returns data for\nids passed in this array. If the data does not exists in the store anymore\nthis item is `undefined` in the response.\n\n##### Example\n\n```javascript\nvar event = new CustomEvent('project-model-query', {\n   detail: {}, // THIS MUST BE SET\n   bubbles: true,\n   composed: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nif (event.defaultPrevented) {\n   event.detail.result.then(list => console.log(list));\n}\n```",
      "summary": "",
      "path": "project-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "savedDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "historyDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "projectDb",
          "type": "PouchDB",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 2
            },
            "end": {
              "line": 174,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 185,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 2
            },
            "end": {
              "line": 346,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 167,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "getDatabase",
          "description": "Returns a reference to a PouchDB database instance for given type.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "PouchDB",
            "desc": "PouchDB instance for the datastore."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "readProject",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 79,
              "column": 2
            },
            "end": {
              "line": 85,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest\nrevision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "updateProject",
          "description": "Updates / saves a project object in the datastore.\nThis function fires `project-object-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 93,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "project",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "removeProject",
          "description": "Removed an object from the datastore.\nThis function fires `project-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 115,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "_handleRead",
          "description": "Handler for project read event request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateBulk",
          "description": "Updates more than one project in a bulk request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 2
            },
            "end": {
              "line": 243,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "projects",
              "type": "Array.<Object>",
              "description": "List of requests to update."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "List of PouchDB responses to each insert"
          }
        },
        {
          "name": "listProjects",
          "description": "Lists all project objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 2
            },
            "end": {
              "line": 262,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ids",
              "type": "?Array.<String>",
              "description": "Optional, list of project IDs to limit the\nresponse to"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved to a list of projects."
          }
        },
        {
          "name": "_handleObjectSave",
          "description": "Handles object save / update",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 2
            },
            "end": {
              "line": 300,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectDelete",
          "description": "Deletes the object from the datastore.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 2
            },
            "end": {
              "line": 319,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_queryHandler",
          "description": "Queries for a list of projects.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 324,
              "column": 2
            },
            "end": {
              "line": 335,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 153,
          "column": 0
        },
        "end": {
          "line": 362,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "RequestBaseModel",
      "name": "LogicElements.ProjectModel",
      "attributes": [],
      "events": [
        {
          "type": "CustomEvent",
          "name": "project-object-changed",
          "description": "Fired when the project entity has been saved / updated in the datastore.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "project-object-deleted",
          "description": "project-object-deleted",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "project-model"
    },
    {
      "description": "Event based access to saved and history request datastore.\n\nThis model creates and updates updates request objects and updates\nURL index associated with the request.\nIt also supports querying for request data, deleting request data and\nundeleting it.\n\n## Events API\n\nAll events must be marked as cancelable or will be ignore by the model.\nIn ARC ecosystem models dispatch the same event after the object is updated\n(deleted, created, updated) but the event is not cancelable.\nComponents should only react on non cancelable model events as it means\nthat the change has been commited to the datastore.\n\nEach handled event is canceled so it's safe to put more than one model in\nthe DOM. Event's detail object will get `result` property with the promise\nresolved when operation commits.\n\n**save-request**\nThis event should be used when dealing with unprocessed request data.\nRequest object may contain Blob or FormData as a payload which would be lost\nif trying to store it in the data store. This flow handles payload\ntransformation.\n\nDetail's parameteres:\n- request - Required, ArcRequest object\n- projects - Optional, Array of strings, List of project names to create\nwith this request and associate with the request object.\n- options - Optional, map of additional options. Currently only `isDrive` is\nsupported. When set `export-google-drive` is dispatched. If the event is not\nhandled by the application the save flow fails.\n\n```javascript\nconst e = new CustomEvent('save-request', {\n bubbles: true,\n composed: true,\n cancelable: true,\n detail: {\n   request: {...}\n   projects: ['Test project'],\n   options: {\n     isDrive: true\n   }\n }\n};\nthis.dispatchEvent(e);\n```\n\n**request-object-read**\n\nReads the request from the data store.\n\nDetail's parameteres:\n\n- `id` - Required, String. Request ID\n- `type` - Required, String. Either `history` or `saved`\n- `rev` - Optional, String. Specific revision to read\n\n**request-object-changed**\n\nShould be only used if the payload is not `Blob` or `FormData` and\nall request properties are set. By default `save-request` event should be\nused.\n\nDetail's parameteres: ArcRequest object.\nhttps://github.com/advanced-rest-client/api-components-api/blob/master/docs/\narc-models.md#arcrequest\n\n**request-object-deleted**\n\nDeletes the object from the data store.\n\nDetail's parameteres:\n\n- `id` - Required, String. Request ID\n- `type` - Required, String. Either `history` or `saved`\n\n**request-objects-deleted**\n\nDeletes number of requests in bulk.\n\nDetail's parameteres:\n\n- `type` - Required, String. Either `history` or `saved`\n- `items` - Required, Array<String>. List of request IDs to delete.\n\n**request-objects-undeleted**\n\nUsed to restore deleted request data.\n\nDetail's parameteres:\n\n- `type` - Required, String. Either `history` or `saved`\n- `items` - Required, Array<Object>. List of requests to restore.\nEach object must contain `_rev` and `_id`.\n\nThe `result` property contains result of calling `revertRemove()` function.\n\n**request-query**\n\nQueries for request data. This flow searches for URL data in a separate index\nand then performs full text search on the request data store.\n\nDetail's parameteres:\n\n- `q` - Required, String. User query.\n- `type` - Optional, String. Either `history` or `saved`. By default it\nsearches in both data stores.\n- `detailed` - Optional, Boolean. If set it uses slower algorithm but performs full\nsearch on the index. When false it only uses filer like query + '*'.",
      "summary": "",
      "path": "request-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "savedDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "historyDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "projectDb",
          "type": "PouchDB",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "historyIndexes",
          "type": "Array.<String>",
          "description": "List of fields to index in the history store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1203,
              "column": 2
            },
            "end": {
              "line": 1205,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "savedIndexes",
          "type": "Array.<String>",
          "description": "List of fields to index in the saved store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1210,
              "column": 2
            },
            "end": {
              "line": 1212,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "noIndexing",
          "type": "boolean | null | undefined",
          "description": "When set it skips request indexing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_workerRequestId",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "_workerPromises",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 6
            },
            "end": {
              "line": 154,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "Adds event listeners.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "Removes event listeners.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 2
            },
            "end": {
              "line": 206,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 2
            },
            "end": {
              "line": 413,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to\nlatest revision."
            },
            {
              "name": "opts",
              "type": "?Object",
              "description": "Additional options. Currently only `restorePayload`\nis supported"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a project object."
          }
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes database data by tye.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 70,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes saved or history data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1352,
              "column": 2
            },
            "end": {
              "line": 1375,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "getDatabase",
          "description": "Returns a reference to a PouchDB database instance for given type.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "PouchDB",
            "desc": "PouchDB instance for the datastore."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "readProject",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 79,
              "column": 2
            },
            "end": {
              "line": 85,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest\nrevision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "updateProject",
          "description": "Updates / saves a project object in the datastore.\nThis function fires `project-object-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 93,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "project",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "removeProject",
          "description": "Removed an object from the datastore.\nThis function fires `project-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "file": "request-base-model.html",
            "start": {
              "line": 115,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          },
          "inheritedFrom": "RequestBaseModel"
        },
        {
          "name": "_saveRequestHandler",
          "description": "A handler for `save-request-data` custom event. It's special event to\nsave / update request data dispatched by the request editor.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 2
            },
            "end": {
              "line": 248,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createProjects",
          "description": "Create projects from project names.\nIt is used when creating a request with a new project.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 2
            },
            "end": {
              "line": 289,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "names",
              "type": "Array.<String>",
              "description": "Names of projects"
            },
            {
              "name": "requestId",
              "type": "?String",
              "description": "Request ID to add to the projects."
            }
          ],
          "return": {
            "type": "Promise.<Array.<String>>",
            "desc": "Promise resolved to list of project IDs"
          }
        },
        {
          "name": "saveRequest",
          "description": "Saves a request into a data store.\nIt handles payload to string conversion, handles types, and syncs request\nwith projects. Use `update()` method only if you are storing already\nprepared request object to the store.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 2
            },
            "end": {
              "line": 326,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ArcRequest object"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Save request object. Currently only `isDrive`\nis supported"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resilved to updated request object."
          }
        },
        {
          "name": "_syncProjects",
          "description": "Sunchronizes project requests to ensure each project contains this\n`requestId` on their list of requests.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 2
            },
            "end": {
              "line": 388,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requestId",
              "type": "String",
              "description": "Request ID"
            },
            {
              "name": "projects",
              "type": "?Array.<String>",
              "description": "List of request projects."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "readBulk",
          "description": "The same as `read()` but for a list of requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 422,
              "column": 2
            },
            "end": {
              "line": 442,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Requests type to restore."
            },
            {
              "name": "keys",
              "type": "Array.<String>",
              "description": "Request ids"
            },
            {
              "name": "opts",
              "type": "?Object",
              "description": "Additional options. Currently only `restorePayload`\nis supported"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "update",
          "description": "Updates / saves the request object in the datastore.\nThis function fires `request-object-changed` event.\n\nIf any of `name`, `method`, `url` or `legacyProject` properties change\nthen the old object is deleted and new is created with new ID.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 454,
              "column": 2
            },
            "end": {
              "line": 479,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "request",
              "type": "Object",
              "description": "An object to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to request object with updated `_rev`"
          }
        },
        {
          "name": "updateBulk",
          "description": "Updates more than one request in a bulk.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 486,
              "column": 2
            },
            "end": {
              "line": 512,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "requests",
              "type": "Array.<Object>",
              "description": "List of requests to update."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "List of PouchDB responses to each insert"
          }
        },
        {
          "name": "remove",
          "description": "Removed an object from the datastore.\nThis function fires `request-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 524,
              "column": 2
            },
            "end": {
              "line": 546,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to\nlatest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted\nobject."
          }
        },
        {
          "name": "revertRemove",
          "description": "Reverts deleted items.\nThis function fires `request-object-changed` event for each restored\nrequest.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 558,
              "column": 2
            },
            "end": {
              "line": 589,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Request type: `saved-requests` or `history-requests`"
            },
            {
              "name": "items",
              "type": "Array",
              "description": "List of request objects. Required properties are\n`_id` and `_rev`."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with restored objects. Objects have\nupdated `_rev` property."
          }
        },
        {
          "name": "_findNotDeleted",
          "description": "Finds last not deleted revision of a document.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 596,
              "column": 2
            },
            "end": {
              "line": 621,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "db",
              "type": "Object",
              "description": "PouchDB instance"
            },
            {
              "name": "items",
              "type": "Array",
              "description": "List of documents to process"
            }
          ],
          "return": {
            "type": "Promise.<Array>",
            "desc": "Last not deleted version of each document."
          }
        },
        {
          "name": "_findUndeletedRevision",
          "description": "Finds a next revision after the `deletedRevision` in the revisions history\nwhich is the one that reverts any changes made after it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 631,
              "column": 2
            },
            "end": {
              "line": 647,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "revs",
              "type": "Object",
              "description": "PouchDB revision history object"
            },
            {
              "name": "deletedRevision",
              "type": "Object",
              "description": "Revision of deleted object (after delete)."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Revision ID of the object before a change registered in\n`deletedRevision`"
          }
        },
        {
          "name": "_handleRead",
          "description": "Handler for request read event request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 652,
              "column": 2
            },
            "end": {
              "line": 678,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectSave",
          "description": "Handles onject save / update",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 684,
              "column": 2
            },
            "end": {
              "line": 726,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectDelete",
          "description": "Deletes the object from the datastore.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 732,
              "column": 2
            },
            "end": {
              "line": 756,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleObjectsDelete",
          "description": "Queries for a list of projects.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 761,
              "column": 2
            },
            "end": {
              "line": 804,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleUndelete",
          "description": "handlers `request-objects-undeleted` event to restore deleted items",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 809,
              "column": 2
            },
            "end": {
              "line": 829,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_filterExistingItems",
          "description": "Filters query results to return only successfuly read data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 835,
              "column": 2
            },
            "end": {
              "line": 844,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result",
              "type": "Object",
              "description": "PouchDB query result"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "List of request that has been read."
          }
        },
        {
          "name": "_findOldRef",
          "description": "Finds a `_rev` for a doc.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 851,
              "column": 2
            },
            "end": {
              "line": 854,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "docs",
              "type": "Array",
              "description": "List of PouchDB documents to search for `_rev`"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Document ID"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Associated `_rev`"
          }
        },
        {
          "name": "_saveGoogleDrive",
          "description": "Saves the request on Google Drive.\nIt sends `drive-request-save` event to call a component responsible\nfor saving the request.\n\nThis do nothing if `opts.drive is not set.`",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 866,
              "column": 2
            },
            "end": {
              "line": 895,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "Data to save"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Save request options. See `saveRequest` for more info."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to updated object."
          }
        },
        {
          "name": "_indexRequest",
          "description": "Updates or creates request search index used when querying for request\ndata.\n\nThis operation is async and in a web worker (separate thred).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "A request to index."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deleteIndex",
          "description": "Removed URL index data when the request is deleted.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 965,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request IDs to delete."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearIndexedData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 967,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getIndexWorker",
          "description": "Creates if nescesary and returns indexing web worker.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 987,
              "column": 2
            },
            "end": {
              "line": 996,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Worker",
            "desc": "An indexing web worker instance."
          }
        },
        {
          "name": "_unregisterWorker",
          "description": "Terminates the worker (if exists) and removes event listeners",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1001,
              "column": 2
            },
            "end": {
              "line": 1009,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onIndexWorkerData",
          "description": "A handler for data returned from the request indexing worker.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1015,
              "column": 2
            },
            "end": {
              "line": 1048,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "Worker event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onIndexWorkerError",
          "description": "A handler for error returned from the request indexing worker.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1054,
              "column": 2
            },
            "end": {
              "line": 1062,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "Worker event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleQuery",
          "description": "A handler for the `request-query` custom event. Queries the datastore for\nrequest data.\nThe event must have `q` property set on the detail object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1070,
              "column": 2
            },
            "end": {
              "line": 1088,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "queryUrlData",
          "description": "Performs a query on the URL index data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1099,
              "column": 2
            },
            "end": {
              "line": 1115,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "Optional, type of the requests to search for.\nBy default it returns all data."
            },
            {
              "name": "detailed",
              "type": "?Boolean",
              "description": "If set it uses slower algorithm but performs full\nsearch on the index. When false it only uses filer like query + '*'."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "_urlQueryHandler",
          "description": "Handler for URL index results search.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1124,
              "column": 2
            },
            "end": {
              "line": 1174,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID sent to the web worker to identify callback\nfunction."
            },
            {
              "name": "results",
              "type": "Object",
              "description": "Map of request id - request type."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "query",
          "description": "Performs a query on the request data store.\nIt uses PouchDB `query` function on built indexes.\nNote, it does not query URL data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1186,
              "column": 2
            },
            "end": {
              "line": 1198,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "type",
              "type": "?String",
              "description": "Optional, type of the requests to search for.\nBy default it returns all data for both history and saved."
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "queryHistory",
          "description": "Queries history store using PouchDB quick search plugin (full text search).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1220,
              "column": 2
            },
            "end": {
              "line": 1222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "querySaved",
          "description": "Queries Saved store using PouchDB quick search plugin (full text search).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1230,
              "column": 2
            },
            "end": {
              "line": 1232,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "User query"
            },
            {
              "name": "ignore",
              "type": "?Array.<String>",
              "description": "List of IDs to ignore."
            }
          ],
          "return": {
            "type": "Promise.<Array.<Object>>",
            "desc": "Promise resolved to the list of requests."
          }
        },
        {
          "name": "_queryStore",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1234,
              "column": 2
            },
            "end": {
              "line": 1260,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q"
            },
            {
              "name": "ignore"
            },
            {
              "name": "db"
            },
            {
              "name": "indexes"
            }
          ]
        },
        {
          "name": "indexData",
          "description": "Performs data index using PouchDB api.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1267,
              "column": 2
            },
            "end": {
              "line": 1273,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Data type - saved or history."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_listProjectRequestsHandler",
          "description": "Handler for `request-project-list` event to query for list of requests in\na project.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1279,
              "column": 2
            },
            "end": {
              "line": 1291,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "readProjectRequests",
          "description": "Reads list of requests associated with a project",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1299,
              "column": 2
            },
            "end": {
              "line": 1307,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Project id"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": "Additional options. Currently only `restorePayload`\nis supported"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "readProjectRequestsLegacy",
          "description": "Reads requests data related to the project from a legacy system.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1313,
              "column": 2
            },
            "end": {
              "line": 1324,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Project id"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "sortRequestProjectOrder",
          "description": "Sorts requests list by `projectOrder` property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1332,
              "column": 2
            },
            "end": {
              "line": 1346,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "Object"
            },
            {
              "name": "b",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Number"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 135,
          "column": 0
        },
        "end": {
          "line": 1434,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "RequestBaseModel",
      "name": "LogicElements.RequestModel",
      "attributes": [
        {
          "name": "no-indexing",
          "description": "When set it skips request indexing.",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 25
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "drive-request-save",
          "description": "Fired when the request should be expored to Google Drive.\nThis element doesn't support this operation but this way it queries for\nan element that can export data to Google Drive.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "export-google-drive",
          "description": "Dispatched when saving request object to the data store and configuration\noption says to save request to Google Drive.\nThis component does not handles the logic responsible for Drive integration.\n\nNote, The request save flow fails when this event is not handled.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-indexing-error",
          "description": "Dispatched when request object indexing finishes with error.\nThis event does not bubbles.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-indexing-finished",
          "description": "Dispatched when request object indexing finishes.\nThis event does not bubbles.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-object-changed",
          "description": "Fired when the project entity has been saved / updated in the datastore.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-object-deleted",
          "description": "request-object-deleted",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-model"
    },
    {
      "description": "An element that saves Request URL in the history and serves list\nof saved URLs.\n\nThe `url-history-query` event expects the `q` property set on the `detail`\nobject. It is passed to the `query()` function and result of calling this\nfunction is set on detail's `result` property.\n\n### Example\n\n```javascript\n\nconst e = new CustomEvent('url-history-query', {\n detail: {\n   q: 'http://mulesoft.com/path/'\n },\n cancelable: true,\n bubbles: true,\n composed: true // if fired in shaddow DOM\n});\ndocument.body.dispatchEvent(e);\n\ne.detail.result.then((urls) => console.log(urls));\n```\n\nThe `url-history-store` requires the `value` property to be set on\nthe `detail` object and it is passed to the `store()` function.\n\n### Example\n\n```javascript\nconst e = new CustomEvent('url-history-store', {\n detail: {\n   value: 'http://mulesoft.com/path/'\n },\n cancelable: true,\n bubbles: true,\n composed: true\n});\ndocument.dispatchEvent(e);\n```\n\nBoth events are cancelled and propagation of the event is stopped.\nTherefore the event should be dispatched with `caneclable` flag set to true.\n\nThe element listens for events on the `window` object so it can be placed\nanywhere in the DOM.\n\n### Example\n\n```html\n<body>\n <url-history-saver></url-history-saver>\n</body>\n```",
      "summary": "",
      "path": "url-history-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 167,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleStore",
          "description": "Handles `url-history-store` custom event and stores an URL in the\ndatastore.\nThe event is canceled and propagation is topped upon handling. The\nevent should be fired with `cancelable` flag set to `true`.\n\nIt calls `store()` function with the `value` property of the `detail`\nobject as an attribute.\n\nIt creates a new `result` property on the `detail` object which is a\nresult of calling `store()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "store",
          "description": "It creates new entry if the URL wasn't already in the data store or\nupdates a `time` and `cnt` property of existing item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "A URL to store in the history store."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to the insert response of PouchDB\nobject (`ok`, `id` and `rev` keys)"
          }
        },
        {
          "name": "_handleQuery",
          "description": "Handles the `url-history-query` custom event.\nIt cancels the event and prohibiits bubbling. Therefore the event should be\nfired as a `cancelable`. It adds the `result` property to the `detail`\nobject which carries a Promise that will resolve to a list of PouchDB\ndocumentnts. It is the same as result as for calling `query()` functiuon.\n\nThe event must contain a `q` property with the query string that is passed\nto the `query()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "query",
          "description": "Gets a list of maching URLs from the datastore.\nList elements are carrying the `url` property with the full\nURL and `cnt` property with number of times this URL has been updated in\nthe data store. `cnt` is used to sort the results.\n\nAdditional properties are regular PouchDB properties like `_id` and `_rev`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 217,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "A string to search for. It result with entries that url\ncontains (not start with!) a `q`."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a list of history items."
          }
        },
        {
          "name": "_sortFunction",
          "description": "A function used to sort query list items. It relays on two properties that\nare set by query function on array entries: `_time` which is a timestamp of\nthe entry and `cnt` which is number of times the URL has been used.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "Object"
            },
            {
              "name": "b",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Number"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 76,
          "column": 2
        },
        "end": {
          "line": 246,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.UrlHistoryModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "url-history-model"
    },
    {
      "description": "Events based access to websockets URL history datastore.\n\nNote: **All events must be cancelable.** When the event is cancelled by an instance\nof the element it won't be handled again by other instance that possibly exists\nin the DOM.\n\nCancellable event is a request to models for change. Non-cancellable event\nis a notification for views to update their values.\nFor example `request-object-changed` event notifies model to update object in\nthe datastore if the event is cancelable and to update views if it's not\ncancellable.\n\nEach handled event contains the `result` property on the `detail` object. It\ncontains a `Promise` object with a result of the operation. Also, for update / delete\nevents the same non-cancelable event is fired.\n\nEvents handled by this element are cancelled and propagation of the event is\nstopped.",
      "summary": "",
      "path": "websocket-url-history-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 58,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 167,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleRead",
          "description": "Handles the read object event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 107,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "update",
          "description": "Updates / saves the object in the datastore.\nThis function fires `websocket-url-history-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          }
        },
        {
          "name": "_handleQueryHistory",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 138,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleQuery",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "list",
          "description": "Lists websocket history objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 177,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "query",
              "type": "?String",
              "description": "A partial url to match results."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved to a list of PouchDB documents."
          }
        },
        {
          "name": "_sortFunction",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 197,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_computeTime",
          "description": "Computes time for timestamp's day, month and year and time set to 0.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 2
            },
            "end": {
              "line": 206,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Database entry item."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The same database item with `_time` property."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 40,
          "column": 0
        },
        "end": {
          "line": 207,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.WebsocketUrlHistoryModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "websocket-url-history-model"
    },
    {
      "description": "Events based access to REST APIs datastore.\n\nNote: **All events must be cancelable.** When the event is cancelled by an instance\nof the element it won't be handled again by other instance that possibly exists\nin the DOM.\n\n`rest-api-index-updated`, `rest-api-data-updated` and `rest-api-deleted` events\nare cancelable if a view requested to alter the data in the datastore. Only\nmodels should handle cancelable events. This element fires an event with the same\ntype but non-cancelable when the operation has been commited to the datastore\nand view shouls handle non-cancelable event to update their state.\n\n## Index and data object\n\nRAML can be a large object therefore iterating over each record when listing\nor searching for APIs would not be efficient. This model creates separate object in\ndifferent data stores to keep listing (index) data separately from RAML data.\nIn most cases application should operate on index data. API data should be\nread directly using record's data store ID which is the same as index id.\n\nIndex object contains following properties:\n\n- `_id` `{String}` - The same ID as API data record ID\n- `title` `{String}` - API title\n- `version` `{String}` - API version number / string\n- `baseUri` `{String}` - API base URI\n- `order` `{Number}` - Order on the list. By default it's `0`\n- `description` `{?String}` - API description. Can be undefined.\n\n## Events API\n\n### Create\n\nCreates bothe api data and api index objects.\n\nTo create data fire cancelable `rest-api-create` with the raml data in\ndetail object\n\n```javascript\nlet event = new CustomEvent('rest-api-create', {\n   detail: {\n     raml: {...}\n   },\n   bubbles: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nconsole.log(event.defaultPrevented);\n// prints \"true\"\n\nevent.detail.result(indexDoc => {\n   console.log(indexDoc);\n   // prints content of the index object\n});\n```\n\nOptional property for create event is `order` which is used to order\nelements on the list.\n\n### Read\n\nReads API data object form the datastore.\n\nTo access data fire cancelable `rest-api-read` with the ID in detail object\n\n```javascript\nlet event = new CustomEvent('rest-api-read', {\n   detail: {\n     id: \"api-datastore-id\"\n   },\n   bubbles: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nconsole.log(event.defaultPrevented);\n// prints \"true\"\n\nevent.detail.result(dataDoc => {\n   console.log(dataDoc.raml);\n   // prints API data\n});\n```\n\n### Update index\n\nUpdates API index object in the datastore.\n\nTo update index data fire cancelable `rest-api-index-updated` with the\nPouchDB document in `detail` object\n\n```javascript\nlet event = new CustomEvent('rest-api-index-updated', {\n   detail: {\n     doc: {_id: ...}\n   },\n   bubbles: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nconsole.log(event.defaultPrevented);\n// prints \"true\"\n\nevent.detail.result(doc => {\n   console.log(doc);\n   // prints upadated document\n});\n```\n\n### Update API data\n\nUpdates API data object in the datastore.\n\nTo update API data fire cancelable `rest-api-data-updated` with the PouchDB\ndocument in `detail` object\n\n```javascript\nlet event = new CustomEvent('rest-api-data-updated', {\n   detail: {\n     doc: {_id: ...}\n   },\n   bubbles: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nconsole.log(event.defaultPrevented);\n// prints \"true\"\n\nevent.detail.result(doc => {\n   console.log(doc);\n   // prints upadated document\n});\n```\n\n### Delete\n\nDeletes API index and API data object from the datastore.\n\nTo remove API data fire cancelable `rest-api-deleted` with the id of the\ndocument in `detail` object\n\n```javascript\nlet event = new CustomEvent('rest-api-deleted', {\n   detail: {\n     id: \"datastore-id\"\n   },\n   bubbles: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nconsole.log(event.defaultPrevented);\n// prints \"true\"\n\nevent.detail.result(() => {\n    // Documents has been deleted\n});\n```\n\nNote, delete operation marks object as deleted. It doesn't actually remove\nthe data from the datastore. If needed data can be restored as described in\nPouchDB documentation.\n\n### Update index data in batch\n\nThe same as create event but allows to update many index objects in one request.\nThis is faster than making series of individual requests.\n\n```javascript\nlet event = new CustomEvent('rest-api-index-updated-batch', {\n   detail: {\n     docs: [{_id: ...]}\n   },\n   bubbles: true,\n   cancelable: true\n});\ndocument.body.dispatchEvent(event);\nconsole.log(event.defaultPrevented);\n// prints \"true\"\n\nevent.detail.result(updated => {\n   console.log(updated);\n   // Array of updated documents\n});\n```\n\n### List index data\n\nList a page of index object. Each page contains a 100 of results.\nIt supports pagination using `nextPageToken` property returned with each call to this API.\n\nResult object contains `nextPageToken` that should be used to pass to next\nrequest to receive next page of results. Index listing data are in `items` property.\n\n```javascript\n\nvar nextPageToken;\nfunction queryPage() {\n   var detail = {};\n   if (nextPageToken) {\n     detail.nextPageToken = nextPageToken;\n   }\n   let event = new CustomEvent('rest-api-index-list', {\n     detail: detail,\n     bubbles: true,\n     cancelable: true\n   });\n   document.body.dispatchEvent(event);\n\n   return event.detail.result\n   .then(result => {\n     nextPageToken = result.nextPageToken;\n     return result.items;\n   });\n}\n```",
      "summary": "",
      "path": "rest-api-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "indexDb",
          "type": "?",
          "description": "A handler to the datastroe contains listing data\n   ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 2
            },
            "end": {
              "line": 311,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "dataDb",
          "type": "?",
          "description": "A handler to the datastore containing REST API data\n(raml definition).\n   ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 316,
              "column": 2
            },
            "end": {
              "line": 318,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_cachedQueryOptions",
          "type": "Object | null | undefined",
          "description": "Cached query options for index data listing.\nKeys is the nextPageToken returned with listing response. If the\npage token has been used with the query it will takes this data\nto return next page results.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 6
            },
            "end": {
              "line": 251,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "defaultQueryOptions",
          "type": "Object | null | undefined",
          "description": "Database query options for pagination.\nOverride this value to change the query options like limit of the results in one call.\n\nThis is query options passed to the PouchDB `allDocs` function. Note that it will not\nset `include_docs` option. A conviniet shortcut is to set the the `includeDocs` property\nand the directive will be added automatically.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 6
            },
            "end": {
              "line": 272,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 2
            },
            "end": {
              "line": 295,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 2
            },
            "end": {
              "line": 305,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 167,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "readIndex",
          "description": "Reads an entry from the index datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 327,
              "column": 2
            },
            "end": {
              "line": 333,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a project object."
          }
        },
        {
          "name": "readData",
          "description": "Reads an entry from the raml data datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 2
            },
            "end": {
              "line": 347,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a project object."
          }
        },
        {
          "name": "updateData",
          "description": "Creates / updates API data object.\nThe `_id` property must be already set on the object.\n\nThis function fires `rest-api-data-updated` custom event on success.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 2
            },
            "end": {
              "line": 371,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "doc",
              "type": "Object",
              "description": "PouchDB document."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a document with updated `_rev`"
          }
        },
        {
          "name": "updateIndex",
          "description": "Creates / updates API index object.\nThe `_id` property must be already set on the object.\n\nThis function fires `rest-api-index-updated` custom event on success.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 2
            },
            "end": {
              "line": 395,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "doc",
              "type": "Object",
              "description": "PouchDB document."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a document with updated `_rev`"
          }
        },
        {
          "name": "updateIndexBatch",
          "description": "Updates many index objects in one request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 402,
              "column": 2
            },
            "end": {
              "line": 426,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "docs",
              "type": "Array.<Object>",
              "description": "List of PouchDB documents to update."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to a list of document with updated `_rev`"
          }
        },
        {
          "name": "remove",
          "description": "Removes data from index and raml data datastores.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 434,
              "column": 2
            },
            "end": {
              "line": 456,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Datastore entry ID to delete. Both data and index objects\nshares the same ID."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          }
        },
        {
          "name": "create",
          "description": "Creates datastores entries for REST API.\nIt creates data object and index object used for listings.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 466,
              "column": 2
            },
            "end": {
              "line": 474,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "raml",
              "type": "Object",
              "description": "A RAML data to insert"
            },
            {
              "name": "order",
              "type": "Number",
              "description": "Optional, creates a datastore entry with given order."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved when the datastore objects are created.\nResolved promise contains index object."
          }
        },
        {
          "name": "listIndex",
          "description": "Lists index data.\n\n### QueryResultObject\n- `data` {Array<Object>} List of PouchDB documents read from the datastore\n- `nextPageToken` {String} Pagination string to be used with next call\nto get resutls for a next page. The nextPageToken don't change over\nsubsequent requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 488,
              "column": 2
            },
            "end": {
              "line": 512,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opts",
              "type": "Object",
              "description": "Query options:\n- nextPageToken {String} Received from previous query page token."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved to a query result object on success."
          }
        },
        {
          "name": "_makeNextPageToken",
          "description": "Generates `nextPageToken` as a random string.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 518,
              "column": 2
            },
            "end": {
              "line": 525,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "String",
            "desc": "Random 32 characters long string."
          }
        },
        {
          "name": "_createHandler",
          "description": "A handler for `rest-api-create` custom event.\nIt only handles event's that hasn't been cancelled.\n\nRequired detail property is `raml` with the RAML data to insert.\nOptional property is `order` that describes order on the list.\n\nIt sets a `result` property on the event `detail` object that is a\npromise returned by `create()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 536,
              "column": 2
            },
            "end": {
              "line": 548,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_readHandler",
          "description": "Handler for the `rest-api-read` custom event.\nIt only handles event's that hasn't been cancelled.\n\nEvent `detail` object must contain the `id` property with datastore entry\nid and may contain a `rev` property to read a specific revision.\n\nIt sets a `result` property on the event `detail` object that is a\npromise returned by `readData()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 559,
              "column": 2
            },
            "end": {
              "line": 572,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexUpdatedHandler",
          "description": "A handler for the `rest-api-index-updated` custom event.\nIt is only handled if the event in cancelable and not cancelled.\n\nUpdates index object in the datastore and sets `result` property on the\nevent detail object with a result of calling `updateIndex()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 580,
              "column": 2
            },
            "end": {
              "line": 592,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dataUpdatedHandler",
          "description": "A handler for the `rest-api-data-updated` custom event.\nIt is only handled if the event in cancelable and not cancelled.\n\nUpdates RAML data object in the datastore and sets `result` property on the\nevent detail object with a result of calling `updateData()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 600,
              "column": 2
            },
            "end": {
              "line": 612,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deletedHandler",
          "description": "Deletes the object from the datastores.\nIt is only handled if the event in cancelable and not cancelled.\n\nEvent has to have `id` property set on the detail object.\n\nIt sets `result` property on the event detail object with a result of\ncalling `remove()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 622,
              "column": 2
            },
            "end": {
              "line": 634,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexesUpdatedHandler",
          "description": "Handler for the `rest-api-index-updated-batch` custom event.\nIt requires to have `docs` property set to event detail as an array of\nPouchDB documents to update.\n\nIt sets `result` property on the event detail object with a result of\ncalling `updateIndexBatch()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 643,
              "column": 2
            },
            "end": {
              "line": 655,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_indexListHandler",
          "description": "Handler for the `rest-api-index-list` custom event.\n\nThe `detail` object can contain `nextPageToken` property used for pagination.\n\nIt sets `result` property on the event detail object with a result of\ncalling `listIndex()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 664,
              "column": 2
            },
            "end": {
              "line": 672,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_prepareStoreObject",
          "description": "Prepares PouchDB data object to store in the datastore.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 678,
              "column": 2
            },
            "end": {
              "line": 691,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "raml"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Datastore object"
          }
        },
        {
          "name": "_prepareIndexObject",
          "description": "Prepares index data store object for the REST API.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 699,
              "column": 2
            },
            "end": {
              "line": 714,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "storeObject",
              "type": "Object",
              "description": "A store object with RAML data"
            },
            {
              "name": "order",
              "type": "?Number",
              "description": "Optional, creates a datastore entry with given order."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Index store object."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 235,
          "column": 0
        },
        "end": {
          "line": 750,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.RestApiModel",
      "attributes": [
        {
          "name": "default-query-options",
          "description": "Database query options for pagination.\nOverride this value to change the query options like limit of the results in one call.\n\nThis is query options passed to the PouchDB `allDocs` function. Note that it will not\nset `include_docs` option. A conviniet shortcut is to set the the `includeDocs` property\nand the directive will be added automatically.",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 6
            },
            "end": {
              "line": 272,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "rest-api-data-updated",
          "description": "Fired when RAML (API) data has been updated.\nThe event is non cancelable which means that the change is commited to the\ndatastore.\n\nIt sets a `result` property on event `detail` object which contains a return\nvalue from calling `updateData()` function.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "rest-api-deleted",
          "description": "Fired when data has been deleted.\nThe event is non cancelable which means that the change is commited to the\ndatastore.\n\nIt sets a `result` property on event `detail` object which contains a return\nvalue from calling `remove()` function.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "rest-api-index-updated",
          "description": "Fired when index data has been updated.\nThe event is non cancelable which means that the change is commited to the\ndatastore.\n\nIt sets a `result` property on event `detail` object which contains a return\nvalue from calling `updateIndex()` function.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "rest-api-model"
    },
    {
      "description": "Model for host rules.\n\nAvailable events:\n\n- `host-rules-insert` Bulk add hosts\n- `host-rules-changed` Change / add record\n- `host-rules-deleted` Remove record\n- `host-rules-list` Lists all rules\n- `host-rules-clear` Clears hosts datastore\n\nEach event must be cancelable or it will be ignored.\nThe insert, change and delete events dispatches non cancelable update/delete\nevents. Application should listen for this events to update it's state.",
      "summary": "",
      "path": "host-rules-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 54,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 63,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 167,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "update",
          "description": "Updates / saves the host rule object in the datastore.\nThis function fires `host-rules-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 2
            },
            "end": {
              "line": 83,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rule",
              "type": "Object",
              "description": "A rule object to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to updated object with updated `_rev`"
          }
        },
        {
          "name": "updateBulk",
          "description": "Updates / saves the host rule object in the datastore.\nThis function fires `host-rules-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 2
            },
            "end": {
              "line": 117,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rules",
              "type": "Array.<Object>",
              "description": "List of rules to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to the result of Pouch DB operation"
          }
        },
        {
          "name": "remove",
          "description": "Removed an object from the datastore.\nThis function fires `host-rules-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 2
            },
            "end": {
              "line": 146,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          }
        },
        {
          "name": "list",
          "description": "Lists all existing host rules",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 2
            },
            "end": {
              "line": 166,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to list of the host rules"
          }
        },
        {
          "name": "_insertHandler",
          "description": "Handler for `host-rules-insert` custom event. Creates rules in bulk.\nIt sets `result` property on event detail object with a result of calling\n`updateBulk()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updatedHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 219,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_deletedHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 236,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_listHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 2
            },
            "end": {
              "line": 246,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 2
            },
            "end": {
              "line": 258,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 34,
          "column": 0
        },
        "end": {
          "line": 259,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.HostRulesModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "host-rules-model"
    },
    {
      "description": "Model for variables\n\nAvailable events:\n\n- `environment-read` Read environment object\n- `environment-updated` Change / add record\n- `environment-deleted` Remove record\n- `environment-list-variables` List variables for an environment\n- `environment-list` List variables\n- `variable-updated` - Add / update variable\n- `variable-deleted` - Delete variable\n- `destroy-model` - Delete model action\n\nEach event must be cancelable or it will be ignored.\nThe insert, change and delete events dispatches non cancelable update/delete\nevents. Application should listen for this events to update it's state.",
      "summary": "",
      "path": "variables-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "environmentDb",
          "type": "Object",
          "description": "Handler to the environments database.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 2
            },
            "end": {
              "line": 82,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "variableDb",
          "type": "Object",
          "description": "Handler to the variables database.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 90,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes saved or history data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 534,
              "column": 2
            },
            "end": {
              "line": 550,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_envReadHandler",
          "description": "Handler for `environment-read` custom event.\nReads environment onject info by it's name.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 2
            },
            "end": {
              "line": 109,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_envUpdateHandler",
          "description": "A handler for the `environment-updated` custom event.\nUpdates the environment in the data store.\n\nThe `environment-updated` custom event should be cancellable or the event\nwon't be handled at all.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 2
            },
            "end": {
              "line": 125,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateEnvironment",
          "description": "Updates environment value.\n\nIf the `value` doesn't contains the `_id` property a new environment is\ncreated. The `_rev` property is always updated to the latest value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "A PouchDB object to be stored. It should contain the\n`_id` property if the object is about to be updated. If the `_id` doesn't\nexists a new object is created."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "__updateEnvironmentName",
          "description": "A special case when the name of the environment changes.\nIt updates any related to this environment variables.\n\nIf this is current environment it also changes its name.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "oldName",
              "type": "String",
              "description": "Name of the environment befoe the change"
            },
            {
              "name": "data",
              "type": "String",
              "description": "Updated data store entry"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_envDeleteHandler",
          "description": "A handler for the `environment-deleted` custom event.\nDeletes a variable in the data store.\n\nThe `environment-deleted` custom event should be cancellable or the event\nwon't be handled at all.\n\nThe delete function fires non cancellable `environment-deleted` custom\nevent so the UI components can use it to update their values.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 2
            },
            "end": {
              "line": 237,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteEnvironment",
          "description": "Deletes an environment from the data store.\n\nAfter updating the data store this method sends the `environment-deleted`\nevent that can't be cancelled so other managers that are present in the DOM\nwill not update the value again. If you don't need updated `_rev` you don't\nhave to listen for this event.\n\nBecause this function changes the `environments` array the\n`environments-list-changed` event is fired alongside the `environment-deleted`\nevent.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 2
            },
            "end": {
              "line": 286,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "Object",
              "description": "The PouchDB `_id` property of the object to delete."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_deleteEnvironmentVariables",
          "description": "To be called after the environment has been deleted. It clears variables\nfor the environment.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 2
            },
            "end": {
              "line": 323,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "environment",
              "type": "String",
              "description": "The environment name."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_envListHandler",
          "description": "A handler for the `environment-list` custom event.\nAdds a `value` propety of the event `detail` object with the array of the\nuser defined environments objects. Each item is a PouchDb data store item\n(with `_id` and `_rev`).\n\nThe `value` set on the details object can be undefined if the user haven't\ndefined any environments or if the manager haven't restored the list yet.\nIn the later case the event target element should listen for\n`environments-list-changed` event to update the list of available environments.\n\nThe `environment-current` custom event should be cancellable or the event\nwon't be handled at all.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 2
            },
            "end": {
              "line": 346,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "listEnvironments",
          "description": "Lists all user defined environments.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 2
            },
            "end": {
              "line": 359,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with the list of environments."
          }
        },
        {
          "name": "_varListHandler",
          "description": "A handler for the `variable-list` custom event.\n\nAdds a `value` propety of the event `detail` object with the array of the\nvariables restored for current environment. Each item is a PouchDb data\nstore item (with `_id` and `_rev`).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 369,
              "column": 2
            },
            "end": {
              "line": 375,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "listVariables",
          "description": "Refreshes list of variables for the `environment`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 384,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "environment",
              "type": "?String",
              "description": "Name of the environment to get the variables\nfrom. If not set then `default` fill be used."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with the list of variables for the\nenvironment."
          }
        },
        {
          "name": "_varUpdateHandler",
          "description": "A handler for the `variable-updated` custom event.\nUpdates the variable in the data store.\n\nThe `variable-updated` custom event should be cancellable or the event\nwon't be handled at all.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 410,
              "column": 2
            },
            "end": {
              "line": 416,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateVariable",
          "description": "Updates a variable value.\n\nIf the `value` doesn't contains the `_id` property a new variable will\nbe created. The `_rev` property will be always updated to the latest value\nso there's no need to set it on the object.\n\nAfter saving the data this method sends the `variable-updated` event that\ncan't be cancelled so other managers that are present in the DOM will not\nupdate the value again.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 2
            },
            "end": {
              "line": 471,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "A PouchDB object to be stored. It should contain the\n`_id` property if the object is about to be updated. If the `_id` doesn't\nexists a new object is created."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_varDeleteHandler",
          "description": "Deletes a variable from the data store.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 480,
              "column": 2
            },
            "end": {
              "line": 486,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "Optional. If it is called from the event handler, this\nis the event object. If initial validation fails then it will set `error`\nproperty on the `detail` object."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteVariable",
          "description": "Deletes a variable from the data store.\n\nAfter updating the data store this method sends the `variable-deleted`\nevent that can't be cancelled so other managers that are present in the DOM\nwill not update the value again. If you don't need updated `_rev` you don't\nhave to listen for this event.\n\nBecause this function changes the `variables` array the\n`variables-list-changed` event is fired alongside the `variable-deleted`\nevent.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 2
            },
            "end": {
              "line": 528,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "Object",
              "description": "The PouchDB `_id` property of the object to delete."
            }
          ],
          "return": {
            "type": "Promise"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 551,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.VariablesModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "variables-model"
    },
    {
      "description": "Model for host rules.",
      "summary": "",
      "path": "auth-data-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cache",
          "type": "Object | null | undefined",
          "description": "Cashed list of authorization data for current session.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 167,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_queryHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "query",
          "description": "Restores the database object entry or cached object if any.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "The URL of the request"
            },
            {
              "name": "authMethod",
              "type": "String",
              "description": "The Authorization method to restore data for."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_updateHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 97,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "update",
          "description": "Creates or updates the auth data in the data store for given method and URl.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 2
            },
            "end": {
              "line": 137,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "The URL of the request"
            },
            {
              "name": "authMethod",
              "type": "String",
              "description": "The Authorization method to restore data for."
            },
            {
              "name": "authData",
              "type": "Object",
              "description": "The data to store."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_normalizeUrl",
          "description": "Removes query parameters and the fragment part from the URL",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "URL to process"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Canonical URL."
          }
        },
        {
          "name": "_computeKey",
          "description": "Computes the database key for auth data",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 2
            },
            "end": {
              "line": 174,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "method",
              "type": "String",
              "description": "The Authorization method to restore data for."
            },
            {
              "name": "url",
              "type": "?String",
              "description": "The URL of the request"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Datastore key for auth data"
          }
        },
        {
          "name": "_findCachedAuthData",
          "description": "Finds an auth data for given `url`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Authorization type."
            },
            {
              "name": "url",
              "type": "String",
              "description": "The URL of the request."
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Auth data if exists in the cache."
          }
        },
        {
          "name": "_cacheAuthData",
          "description": "Sends authorization data to the cache.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Authorization type."
            },
            {
              "name": "url",
              "type": "String",
              "description": "current request URL"
            },
            {
              "name": "data",
              "type": "Object",
              "description": "Authorization data to store."
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 205,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "LogicElements.AuthDataModel",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "auth-data-model"
    }
  ],
  "classes": [
    {
      "description": "A base class for all models.",
      "summary": "",
      "path": "base-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 2
            },
            "end": {
              "line": 76,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          }
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          }
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          }
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteModel",
          "description": "Deletes current database.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 194,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "ArcBaseModel"
    },
    {
      "description": "A base class for Request and Projects` models.",
      "summary": "",
      "path": "request-base-model.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "db",
          "type": "PouchDB",
          "description": "Note, the element does not include PouchDB to the document!",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "uuid",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "savedDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "historyDb",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "projectDb",
          "type": "PouchDB",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 74,
              "column": 2
            },
            "end": {
              "line": 76,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "read",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 91,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_computeMidnight",
          "description": "Computes past mindnight for given timestamp.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Timestamp"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Time reduced to midnight."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_fireUpdated",
          "description": "Dispatches non-cancelable change event.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "A detail object to dispatch."
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Created and dispatched event."
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_handleException",
          "description": "Handles any exception in the model in a unified way.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "(Error | Object)",
              "description": "An error object"
            },
            {
              "name": "noThrow",
              "type": "?Boolean",
              "description": "If set the function will not throw error.\nThis allow to do the logic without stopping program."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "deleteModel",
          "description": "Deletes database data by tye.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 70,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_deleteModelHandler",
          "description": "Handler for `destroy-model` custom event.\nDeletes current data when scheduled for deletion.",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 167,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "base-model.html",
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBaseModel"
        },
        {
          "name": "getDatabase",
          "description": "Returns a reference to a PouchDB database instance for given type.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Either `saved-requests` or `history-requests`"
            }
          ],
          "return": {
            "type": "PouchDB",
            "desc": "PouchDB instance for the datastore."
          }
        },
        {
          "name": "readProject",
          "description": "Reads an entry from the datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 2
            },
            "end": {
              "line": 85,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest\nrevision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a datastore object."
          }
        },
        {
          "name": "updateProject",
          "description": "Updates / saves a project object in the datastore.\nThis function fires `project-object-changed` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "project",
              "type": "Object",
              "description": "A project to save / update"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise to project object with updated `_rev`"
          }
        },
        {
          "name": "removeProject",
          "description": "Removed an object from the datastore.\nThis function fires `project-object-deleted` event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID of the datastore entry."
            },
            {
              "name": "rev",
              "type": "?String",
              "description": "Specific revision to read. Defaults to latest revision."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a new `_rev` property of deleted object."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 135,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "ArcBaseModel",
      "name": "RequestBaseModel"
    }
  ]
}
