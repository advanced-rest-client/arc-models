{
  "version": "experimental",
  "tags": [
    {
      "name": "auth-data-model",
      "path": "./auth-data-model.js",
      "description": "Model for authorization data stored in the application.",
      "attributes": [
        {
          "name": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "db",
          "description": "Note, the element does not include PouchDB to the document!",
          "type": "Database<{}>"
        },
        {
          "name": "defaultQueryOptions",
          "type": "DefaultQueryOptions"
        },
        {
          "name": "eventsTarget",
          "type": "EventTarget"
        },
        {
          "name": "name",
          "description": "Name of the data store",
          "type": "string | undefined"
        },
        {
          "name": "revsLimit",
          "attribute": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "client-certificate-model",
      "path": "./client-certificate-model.js",
      "description": "Events based access to client-certificates data store.\n\nNote: **All events must be cancelable.** When the event is cancelled by an instance\nof the element it won't be handled again by other instance that possibly exists\nin the DOM.\n\nCancellable event is a request to models for change. Non-cancellable event\nis a notification for views to update their values.\nFor example `request-object-changed` event notifies model to update object in\nthe datastore if the event is cancelable and to update views if it's not\ncancellable.\n\nEach handled event contains the `result` property on the `detail` object. It\ncontains a `Promise` object with a result of the operation. Also, for update / delete\nevents the same non-cancelable event is fired.\n\nEvents handled by this element are cancelled and propagation of the event is\nstopped.\n\nThe certificates are located in the `client-certificates-data` store.\nContent is not stored with the listing data for performance.\n\n`clientCertificate` structure\n- `type` {String} - Certificate type. Either p12 or pem. Required.\n- `cert` {Array<Certificate>} or {Certificate} - Certificate or list of certificates to use. Required.\n- `key` {Array<Certificate>} or {Certificate} - Key for pem certificate. Optional.\n- `name` {String} - Custom name of the certificate. Optional.\n- `created` {Number} - Timestamp when the certificate was inserted into the data store.\nRequired when returning a result. Auto-generated when inserting.\n\n`Certificate` structure\n- `data` {String} or {ArrayBuffer} or {Buffer} The certificate to use. Required.\nThe p12 type certificate must be a Buffer. The `get()` method always returns\noriginal data type.\n- `passphrase` {String} - A passphrase to use to unlock the certificate. Optional.",
      "attributes": [
        {
          "name": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "dataDb",
          "type": "Database<{}>"
        },
        {
          "name": "db",
          "description": "Note, the element does not include PouchDB to the document!",
          "type": "Database<{}>"
        },
        {
          "name": "defaultQueryOptions",
          "type": "DefaultQueryOptions"
        },
        {
          "name": "eventsTarget",
          "type": "EventTarget"
        },
        {
          "name": "name",
          "description": "Name of the data store",
          "type": "string | undefined"
        },
        {
          "name": "revsLimit",
          "attribute": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "host-rules-model",
      "path": "./host-rules-model.js",
      "description": "Model for host rules.\n\nAvailable events:\n\n- `host-rules-insert` Bulk add hosts\n- `host-rules-changed` Change / add record\n- `host-rules-deleted` Remove record\n- `host-rules-list` Lists all rules\n- `host-rules-clear` Clears hosts datastore\n\nEach event must be cancelable or it will be ignored.\nThe insert, change and delete events dispatches non cancelable update/delete\nevents. Application should listen for this events to update it's state.",
      "attributes": [
        {
          "name": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "db",
          "description": "Note, the element does not include PouchDB to the document!",
          "type": "Database<{}>"
        },
        {
          "name": "defaultQueryOptions",
          "type": "DefaultQueryOptions"
        },
        {
          "name": "eventsTarget",
          "type": "EventTarget"
        },
        {
          "name": "name",
          "description": "Name of the data store",
          "type": "string | undefined"
        },
        {
          "name": "revsLimit",
          "attribute": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "project-model",
      "path": "./project-model.js",
      "description": "A model to access projects data in Advanced REST Client.\nThis component provides direct access to the data via the API\nand Events API defined in events/ folder.",
      "attributes": [
        {
          "name": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "savedDb",
          "type": "Database<{}>"
        },
        {
          "name": "historyDb",
          "type": "Database<{}>"
        },
        {
          "name": "projectDb",
          "type": "Database<{}>"
        },
        {
          "name": "db",
          "description": "Note, the element does not include PouchDB to the document!",
          "type": "Database<{}>"
        },
        {
          "name": "defaultQueryOptions",
          "type": "DefaultQueryOptions"
        },
        {
          "name": "eventsTarget",
          "type": "EventTarget"
        },
        {
          "name": "name",
          "description": "Name of the data store",
          "type": "string | undefined"
        },
        {
          "name": "revsLimit",
          "attribute": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "request-model",
      "path": "./request-model.js",
      "description": "A model to access request data in Advanced REST Client.\n\nRequests are stored as a \"history\" and \"saved\" requests. The history\nrequest is stored each time a HTTP request in the application is made.\nThe \"saved\" request is a special type that has additional metadata\nlike name, description, or project ID.\n\nThis model offers standard CRUD operation on both saved and history stores.\nSearch function requires passing the \"type\" parameter which is either `saved`\nor `history` which corresponds to the corresponding request type.\n\n## Querying for data\n\nBother IndexedDB and PouchDB aren't designed for full text queries.\nThis model works with the `UrlIndexer` that is responsible for indexing the data\nto perform a semi-full search operation. When a `detailed` options is set on the query\nthen it uses slower algorithm but performs full search on the index.\nWhen it is not set it only uses filer like query + '*'.",
      "attributes": [
        {
          "name": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "historyIndexes",
          "description": "List of fields to index in the history store.",
          "type": "string[]"
        },
        {
          "name": "savedIndexes",
          "description": "List of fields to index in the saved store.",
          "type": "string[]"
        },
        {
          "name": "savedDb",
          "type": "Database<{}>"
        },
        {
          "name": "historyDb",
          "type": "Database<{}>"
        },
        {
          "name": "projectDb",
          "type": "Database<{}>"
        },
        {
          "name": "db",
          "description": "Note, the element does not include PouchDB to the document!",
          "type": "Database<{}>"
        },
        {
          "name": "defaultQueryOptions",
          "type": "DefaultQueryOptions"
        },
        {
          "name": "eventsTarget",
          "type": "EventTarget"
        },
        {
          "name": "name",
          "description": "Name of the data store",
          "type": "string | undefined"
        },
        {
          "name": "revsLimit",
          "attribute": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "rest-api-model",
      "path": "./rest-api-model.js",
      "description": "REST APIs model.",
      "attributes": [
        {
          "name": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "indexDb",
          "description": "A handler to the datastore. Contains listing data.",
          "type": "Database<{}>"
        },
        {
          "name": "dataDb",
          "description": "A handler to the datastore containing REST API data\n(AMF model).",
          "type": "Database<{}>"
        },
        {
          "name": "db",
          "description": "Note, the element does not include PouchDB to the document!",
          "type": "Database<{}>"
        },
        {
          "name": "defaultQueryOptions",
          "type": "DefaultQueryOptions"
        },
        {
          "name": "eventsTarget",
          "type": "EventTarget"
        },
        {
          "name": "name",
          "description": "Name of the data store",
          "type": "string | undefined"
        },
        {
          "name": "revsLimit",
          "attribute": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "url-history-model",
      "path": "./url-history-model.js",
      "description": "An element that saves Request URL in the history and serves list\nof saved URLs.\n\nThe `url-history-query` event expects the `q` property set on the `detail`\nobject. It is passed to the `query()` function and result of calling this\nfunction is set on detail's `result` property.",
      "attributes": [
        {
          "name": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "db",
          "description": "Note, the element does not include PouchDB to the document!",
          "type": "Database<{}>"
        },
        {
          "name": "defaultQueryOptions",
          "type": "DefaultQueryOptions"
        },
        {
          "name": "eventsTarget",
          "type": "EventTarget"
        },
        {
          "name": "name",
          "description": "Name of the data store",
          "type": "string | undefined"
        },
        {
          "name": "revsLimit",
          "attribute": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "url-indexer",
      "path": "./url-indexer.js",
      "description": "An element responsible for indexing and querying for URL data.\n\nTo index an URL it requires the following properties:\n- url - the URL to index\n- id - datastore id of referenced object\n- type - type of the object - it's data store name. Type is returned\nwith query results.\n\nIt queries for indexed data by looking into URL structure. When the query\nresult is ready it returns ordered list of results (by relevance) with\n`id` (referenced object), and `type`. The query function do not read the\ndata from referenced data store.\n\nThe component is used to cooperate with saved/history request data model\nand with REST APIs model. However it can index any URL.\n\nThe component automatically handles request update/delete events to index or\nremove index of a request object.\n\n## Usage\n\n### Storing URL data\n\n```javascript\nconst e = new CustomEvent('url-index-update', {\n  composed: true,\n  bubbles: true,\n  cancelable: true,\n  detail: {\n    data: [{\n      id: 'xxx',\n      type: 'saved-requests',\n      url: 'https://domain.com'\n    }]\n  }\n});\nthis.dispatchEvent(e);\ne.detail.result\n.then((result) => {\n  console.log(result);\n});\n```\n\nor directly on the component:\n\n```javascript\nconst node = document.querySelector('url-indexer');\nnode.index([{\n  id: 'xxx',\n  type: 'saved',\n  url: 'https://domain.com'\n}])\n.then((result) => {});\n```\n\n### Querying for data\n\n```javascript\nconst e = new CustomEvent('url-index-query', {\n  composed: true,\n  bubbles: true,\n  cancelable: true,\n  detail: {\n    q: 'https://...',\n    type: 'saved', // optional\n    detailed: false // Optional, default to `false`\n  }\n});\nthis.dispatchEvent(e);\ne.detail.result\n.then((result) => {\n  console.log(result);\n});\n```\n\nor direct call:\n\n```javascript\nconst node = document.querySelector('url-indexer');\nnode.query('https://...', {\n  type: 'saved-requests', // optional\n  detailed: false // Optional, default to `false`\n})\n.then((result) => {});\n```\nSee query method for description of parameters."
    },
    {
      "name": "variables-model",
      "path": "./variables-model.js",
      "description": "Model for variables",
      "attributes": [
        {
          "name": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "environmentDb",
          "description": "Handler to the environments database.",
          "type": "Database<{}>"
        },
        {
          "name": "variableDb",
          "description": "Handler to the variables database.",
          "type": "Database<{}>"
        },
        {
          "name": "db",
          "description": "Note, the element does not include PouchDB to the document!",
          "type": "Database<{}>"
        },
        {
          "name": "defaultQueryOptions",
          "type": "DefaultQueryOptions"
        },
        {
          "name": "eventsTarget",
          "type": "EventTarget"
        },
        {
          "name": "name",
          "description": "Name of the data store",
          "type": "string | undefined"
        },
        {
          "name": "revsLimit",
          "attribute": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "websocket-url-history-model",
      "path": "./websocket-url-history-model.js",
      "description": "Gives an access to the WebSocket entities.",
      "attributes": [
        {
          "name": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "db",
          "description": "Note, the element does not include PouchDB to the document!",
          "type": "Database<{}>"
        },
        {
          "name": "defaultQueryOptions",
          "type": "DefaultQueryOptions"
        },
        {
          "name": "eventsTarget",
          "type": "EventTarget"
        },
        {
          "name": "name",
          "description": "Name of the data store",
          "type": "string | undefined"
        },
        {
          "name": "revsLimit",
          "attribute": "revsLimit",
          "description": "Limit number of revisions on the data store.",
          "type": "number | undefined"
        }
      ]
    }
  ]
}