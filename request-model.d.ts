/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   request-model.html
 */

/// <reference path="base-model.d.ts" />

declare namespace LogicElements {

  /**
   * Events based access to saved request datastore.
   *
   * Note: **All events must be cancelable.** When the event is cancelled by an instance
   * of the element it won't be handled again by other instance that possibly exists
   * in the DOM.
   *
   * Cancellable event is a request to models for change. Non-cancellable event
   * is a notification for views to update their values. For example
   * `request-object-changed` event notifies model to update object in
   * the datastore if the event is cancelable and to update views if it's not
   * cancellable.
   *
   * Each handled event contains the `result` property on the `detail` object. It
   * contains a `Promise` object with a result of the operation. Also, for update / delete
   * events the same non-cancelable event is fired.
   *
   * Events handled by this element are cancelled and propagation of the event is
   * stopped.
   *
   * Supported operations:
   *
   * -   Read request object (`request-object-read`)
   * -   Update name only (`request-name-changed`)
   * -   Update request object (`request-object-changed`)
   * -   Delete object (`request-object-deleted`)
   * -   Deletes list of request objects (`request-objects-deleted`)
   *
   * ## Request object types
   *
   * There are two request object types: `saved-requests` and `history-requests`.
   * Each event must contain a `type` property to determine which database to query
   * for an object.
   *
   * ### Events description
   *
   * #### `request-object-read` event
   *
   * Reads a request object from the datastore.
   *
   * ##### Properties
   *
   * -   `id` (String, required) ID of the datastore entry
   * -   `rev` (String, optional) Specific revision to retrieve from the
   * datastore. Latest by default.
   * -   `type` {String, required} Request object type. Either `saved-requests`
   * or `history-requests`
   *
   * ##### Example
   *
   * ```javascript
   * var event = new CustomEvent('request-object-read', {
   *    detail: { id: 'some-id', type: 'saved-requests' },
   *    bubbles: true,
   *    composed: true,
   *    cancelable: true
   * });
   * if (event.defaultPrevented) {
   *    event.detail.result.then(request => console.log(request));
   * }
   * ```
   *
   * #### `request-name-changed` Event
   *
   * Changes name of a request. Promise result has updated `name` and `_rev` properties.
   * This operation deletes old object because it changes the `name` of the request
   * that is used to build the datastore key.
   *
   * ##### Properties
   * -   `id` (String, required if `project` is not set) ID of the datastore entry
   * -   `request` (Object, required if `id` is not set) The database entity
   * -   `name` (String, required) New name of the project. It doesn't matter
   * if `project` property already has new name.
   * -   `type` {String, required} Request object type. Either `saved-requests`
   * or `history-requests`
   *
   * ##### Example
   *
   * ```javascript
   * var event = new CustomEvent('request-name-changed', {
   *    detail: { id: 'some-id', name: 'new name', type: 'history-requests' },
   *    bubbles: true,
   *    composed: true,
   *    cancelable: true
   * });
   * if (event.defaultPrevented) {
   *    event.detail.result.then(request => console.log(request));
   * }
   * ```
   *
   * #### `request-object-changed` event
   *
   * Updates / saves new object in the datastore.
   *
   * ##### Properties
   *
   * -   `request` (Object, required) An object to store
   * -   `type` {String, required} Request object type. Either `saved-requests`
   * or `history-requests`
   *
   * ##### Example
   * *
   * ```javascript
   * var event = new CustomEvent('request-object-changed', {
   *    detail: { request: {...}, type: 'saved-requests' },
   *    bubbles: true,
   *    composed: true,
   *    cancelable: true
   * });
   * if (event.defaultPrevented) {
   *    event.detail.result.then(request => console.log(request));
   * }
   * ```
   *
   * #### `request-object-deleted` event
   *
   * Deletes the object from the datastore. This operation fires `request-object-deleted`
   * custom event. Promise returns object's new `_rev` value.
   *
   * ##### Properties
   * -   `id` (String, required) ID of the datastore entry
   * -   `rev` (String, optional) The `_rev` property of the PouchDB datastore
   * object. If not set it will use latest revision.
   * -   `type` {String, required} Request object type. Either `saved-requests` or
   * `history-requests`
   *
   * ##### Example
   *
   * ```javascript
   * var event = new CustomEvent('request-object-deleted', {
   *    detail: { id: 'some-id', type: 'saved-requests' },
   *    bubbles: true,
   *    composed: true,
   *    cancelable: true
   * });
   * if (event.defaultPrevented) {
   *    event.detail.result.then(newRev => console.log(newRev));
   * }
   * ```
   *
   * #### `request-objects-deleted` event
   *
   * Removes list of requests in batch operation. Promise results to the map where keys
   * are request ids and values are new revision hash.
   *
   * ##### Properties
   *
   * -   `items` (Array, required) List of IDs to delete
   * -   `type` {String, required} Request object type. Either `saved-requests` or `history-requests`
   *
   * ##### Example
   *
   * ```javascript
   * var event = new CustomEvent('request-objects-deleted', {
   *    detail: {
   *      items: ['some-id', 'other-id'],
   *      type: 'saved-requests'
   *    },
   *    bubbles: true,
   *    composed: true,
   *    cancelable: true
   *  });
   *  if (event.defaultPrevented) {
   *    event.detail.result.then(deleted => console.log(deleted));
   *  }
   *  ```<link rel="import" href="../polymer/polymer.html">
   *  <link rel="import" href="../app-pouchdb/pouchdb.html">
   *  <link rel="import" href="../events-target-behavior/events-target-behavior.html">
   *
   * #### `request-objects-undeleted` event
   *
   * Restores previously deleted requests from the history.
   * It searches in the revision history of each object to find a revision before
   * passed `_rev` and restores this object as a new one in the revision tree.
   *
   * This operation fires `request-object-deleted` custom event. Promise returns
   * request objects with updated `_rev` value.
   *
   * ##### Properties
   *
   * -   `items` (Array, required) List of requests to restore. It required `_id`
   * and `_rev` properties to be set on each object. The `_rev` property must be
   * a revision updated after the deletion of the object.
   * -   `type` {String, required} Request object type. Either `saved-requests`
   * or `history-requests`
   *
   * ##### Example
   *
   * ```javascript
   * var event = new CustomEvent('request-objects-deleted', {
   *    detail: {
   *      items: [{_id: 'some-id', '_rev': '2-xyz']},
   *      type: 'saved-requests'
   *    },
   *    bubbles: true,<link rel="import" href="../polymer/polymer.html">
   * <link rel="import" href="../app-pouchdb/pouchdb.html">
   * <link rel="import" href="../events-target-behavior/events-target-behavior.html">
   *    composed: true,
   *    cancelable: true
   * });
   * if (event.defaultPrevented) {
   *    event.detail.result.then(restored => console.log(restored));
   * }
   * ```
   */
  class RequestModel extends Polymer.Element {
    readonly savedDb: any;
    readonly historyDb: any;
    _attachListeners(node: any): void;
    _detachListeners(node: any): void;

    /**
     * Returns a reference to a PouchDB database instance for given type.
     *
     * @param type Either `saved-requests` or `history-requests`
     * @returns PouchDB instance for the datastore.
     */
    getDatabase(type: String|null): PouchDB|null;

    /**
     * Reads an entry from the datastore.
     *
     * @param type Request type: `saved-requests` or `history-requests`
     * @param id The ID of the datastore entry.
     * @param rev Specific revision to read. Defaults to latest revision.
     * @returns Promise resolved to a project object.
     */
    read(type: String|null, id: String|null, rev: String|null): Promise<any>|null;

    /**
     * Updates / saves the request object in the datastore.
     * This function fires `request-object-changed` event.
     *
     * If any of `name`, `method`, `url` or `legacyProject` properties change
     * then the old object is deleted and new is created with new ID.
     *
     * @param type Request type: `saved-requests` or `history-requests`
     * @param request An object to save / update
     * @returns Resolved promise to request object with updated `_rev`
     */
    update(type: String|null, request: object|null): Promise<any>|null;

    /**
     * Updates more than one request in a bulk.
     *
     * @param type Request type: `saved-requests` or `history-requests`
     * @returns List of PouchDB responses to each insert
     */
    updateBulk(type: String|null, requests: any): any[]|null;

    /**
     * Removed an object from the datastore.
     * This function fires `request-object-deleted` event.
     *
     * @param type Request type: `saved-requests` or `history-requests`
     * @param id The ID of the datastore entry.
     * @param rev Specific revision to read. Defaults to latest revision.
     * @returns Promise resolved to a new `_rev` property of deleted object.
     */
    remove(type: String|null, id: String|null, rev: String|null): Promise<any>|null;

    /**
     * Reverts deleted items.
     * This function fires `request-object-changed` event for each restored
     * request.
     *
     * @param type Request type: `saved-requests` or `history-requests`
     * @param items List of request objects. Required properties are
     * `_id` and `_rev`.
     * @returns Resolved promise with restored objects. Objects have
     * updated `_rev` property.
     */
    revertRemove(type: String|null, items: any[]|null): Promise<any>|null;
    _findNotDeleted(db: any, items: any): any;

    /**
     * Finds a next revision after the `deletedRevision` in the revisions history
     * which is the one that reverts any changes made after it.
     *
     * @param revs PouchDB revision history object
     * @param deletedRevision Revision of deleted object (after delete).
     * @returns Revision ID of the object before a change registered in
     * `deletedRevision`
     */
    _findUndeletedRevision(revs: object|null, deletedRevision: object|null): String|null;

    /**
     * Generates the IS for the request depending on it's type and properties.
     *
     * @param request The request object to store.
     * @param isHistory Is true then it generates an ID for a history
     * item
     * @returns A database ID
     */
    _generateId(request: object|null, isHistory: Boolean|null): String|null;

    /**
     * Handler for request read event request.
     */
    _handleRead(e: any): void;

    /**
     * Updates name of a request.
     */
    _handleNameChange(e: any): void;

    /**
     * Handles onject save / update
     */
    _handleObjectSave(e: any): void;

    /**
     * Deletes the object from the datastore.
     */
    _handleObjectDelete(e: any): void;

    /**
     * Queries for a list of projects.
     */
    _handleObjectsDelete(e: any): void;

    /**
     * handlers `request-objects-undeleted` event to restore deleted items
     */
    _handleObjectsUndelete(e: any): void;

    /**
     * Filters query results to return only successfuly read data.
     *
     * @param result PouchDB query result
     * @returns List of request that has been read.
     */
    _filterExistingItems(result: object|null): any[]|null;
    _findOldRef(docs: any, id: any): any;
  }
}

interface HTMLElementTagNameMap {
  "request-model": LogicElements.RequestModel;
}
