/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   request-model.html
 */

/// <reference path="request-base-model.d.ts" />
/// <reference path="../app-pouchdb-quick-search/pouchdb-quick-search.d.ts" />
/// <reference path="../arc-electron-payload-processor/payload-processor.d.ts" />

declare namespace LogicElements {

  /**
   * Event based access to saved and history request datastore.
   *
   * This model creates and updates updates request objects and updates
   * URL index associated with the request.
   * It also supports querying for request data, deleting request data and
   * undeleting it.
   *
   * ## Events API
   *
   * All events must be marked as cancelable or will be ignore by the model.
   * In ARC ecosystem models dispatch the same event after the object is updated
   * (deleted, created, updated) but the event is not cancelable.
   * Components should only react on non cancelable model events as it means
   * that the change has been commited to the datastore.
   *
   * Each handled event is canceled so it's safe to put more than one model in
   * the DOM. Event's detail object will get `result` property with the promise
   * resolved when operation commits.
   *
   * **save-request**
   * This event should be used when dealing with unprocessed request data.
   * Request object may contain Blob or FormData as a payload which would be lost
   * if trying to store it in the data store. This flow handles payload
   * transformation.
   *
   * Detail's parameteres:
   * - request - Required, ArcRequest object
   * - projects - Optional, Array of strings, List of project names to create
   * with this request and associate with the request object.
   * - options - Optional, map of additional options. Currently only `isDrive` is
   * supported. When set `export-google-drive` is dispatched. If the event is not
   * handled by the application the save flow fails.
   *
   * ```javascript
   * const e = new CustomEvent('save-request', {
   *  bubbles: true,
   *  composed: true,
   *  cancelable: true,
   *  detail: {
   *    request: {...}
   *    projects: ['Test project'],
   *    options: {
   *      isDrive: true
   *    }
   *  }
   * };
   * this.dispatchEvent(e);
   * ```
   *
   * **request-object-read**
   *
   * Reads the request from the data store.
   *
   * Detail's parameteres:
   *
   * - `id` - Required, String. Request ID
   * - `type` - Required, String. Either `history` or `saved`
   * - `rev` - Optional, String. Specific revision to read
   *
   * **request-object-changed**
   *
   * Should be only used if the payload is not `Blob` or `FormData` and
   * all request properties are set. By default `save-request` event should be
   * used.
   *
   * Detail's parameteres: ArcRequest object.
   * https://github.com/advanced-rest-client/api-components-api/blob/master/docs/
   * arc-models.md#arcrequest
   *
   * **request-object-deleted**
   *
   * Deletes the object from the data store.
   *
   * Detail's parameteres:
   *
   * - `id` - Required, String. Request ID
   * - `type` - Required, String. Either `history` or `saved`
   *
   * **request-objects-deleted**
   *
   * Deletes number of requests in bulk.
   *
   * Detail's parameteres:
   *
   * - `type` - Required, String. Either `history` or `saved`
   * - `items` - Required, Array<String>. List of request IDs to delete.
   *
   * **request-objects-undeleted**
   *
   * Used to restore deleted request data.
   *
   * Detail's parameteres:
   *
   * - `type` - Required, String. Either `history` or `saved`
   * - `items` - Required, Array<Object>. List of requests to restore.
   * Each object must contain `_rev` and `_id`.
   *
   * The `result` property contains result of calling `revertRemove()` function.
   *
   * **request-query**
   *
   * Queries for request data. This flow searches for URL data in a separate index
   * and then performs full text search on the request data store.
   *
   * Detail's parameteres:
   *
   * - `q` - Required, String. User query.
   * - `type` - Optional, String. Either `history` or `saved`. By default it
   * searches in both data stores.
   * - `detailed` - Optional, Boolean. If set it uses slower algorithm but performs full
   * search on the index. When false it only uses filer like query + '*'.
   */
  class RequestModel extends RequestBaseModel {

    /**
     * List of fields to index in the history store.
     */
    readonly historyIndexes: Array<String|null>|null;

    /**
     * List of fields to index in the saved store.
     */
    readonly savedIndexes: Array<String|null>|null;

    /**
     * When set it skips request indexing.
     */
    noIndexing: boolean|null|undefined;
    _workerRequestId: number|null|undefined;
    _workerPromises: any[]|null|undefined;

    /**
     * Adds event listeners.
     */
    _attachListeners(node: HTMLElement|null): void;

    /**
     * Removes event listeners.
     */
    _detachListeners(node: HTMLElement|null): void;

    /**
     * Reads an entry from the datastore.
     *
     * @param type Request type: `saved-requests` or `history-requests`
     * @param id The ID of the datastore entry.
     * @param rev Specific revision to read. Defaults to
     * latest revision.
     * @param opts Additional options. Currently only `restorePayload`
     * is supported
     * @returns Promise resolved to a project object.
     */
    read(type: String|null, id: String|null, rev: String|null, opts: object|null): Promise<any>|null;

    /**
     * Handler for `destroy-model` custom event.
     * Deletes saved or history data when scheduled for deletion.
     */
    _deleteModelHandler(e: CustomEvent|null): void;

    /**
     * A handler for `save-request-data` custom event. It's special event to
     * save / update request data dispatched by the request editor.
     */
    _saveRequestHandler(e: CustomEvent|null): void;

    /**
     * Create projects from project names.
     * It is used when creating a request with a new project.
     *
     * @param names Names of projects
     * @param requestId Request ID to add to the projects.
     * @returns Promise resolved to list of project IDs
     */
    _createProjects(names: Array<String|null>|null, requestId: String|null): Promise<Array<String|null>|null>;

    /**
     * Handler for `save-history` object. It computes payload to savable state
     * and saves history object.
     * Note, the ID is is a combination of today's midningt timestamp, url and
     * method. If such ID already exists the object is updated.
     */
    _saveHistoryHandler(e: CustomEvent|null): void;

    /**
     * Saves a request into a data store.
     * It handles payload to string conversion, handles types, and syncs request
     * with projects. Use `update()` method only if you are storing already
     * prepared request object to the store.
     *
     * @param request ArcRequest object
     * @param opts Save request object. Currently only `isDrive`
     * is supported
     * @returns A promise resilved to updated request object.
     */
    saveRequest(request: object|null, opts: object|null): Promise<any>|null;

    /**
     * Sunchronizes project requests to ensure each project contains this
     * `requestId` on their list of requests.
     *
     * @param requestId Request ID
     * @param projects List of request projects.
     */
    _syncProjects(requestId: String|null, projects: Array<String|null>|null): Promise<any>|null;

    /**
     * The same as `read()` but for a list of requests.
     *
     * @param type Requests type to restore.
     * @param keys Request ids
     * @param opts Additional options. Currently only `restorePayload`
     * is supported
     */
    readBulk(type: String|null, keys: Array<String|null>|null, opts: object|null): Promise<any>|null;

    /**
     * Updates / saves the request object in the datastore.
     * This function fires `request-object-changed` event.
     *
     * If any of `name`, `method`, `url` or `legacyProject` properties change
     * then the old object is deleted and new is created with new ID.
     *
     * @param type Request type: `saved-requests` or `history-requests`
     * @param request An object to save / update
     * @returns Resolved promise to request object with updated `_rev`
     */
    update(type: String|null, request: object|null): Promise<any>|null;

    /**
     * Updates more than one request in a bulk.
     *
     * @param type Request type: `saved-requests` or `history-requests`
     * @param requests List of requests to update.
     * @returns List of PouchDB responses to each insert
     */
    updateBulk(type: String|null, requests: Array<object|null>|null): any[]|null;

    /**
     * Removed an object from the datastore.
     * This function fires `request-object-deleted` event.
     *
     * @param type Request type: `saved-requests` or `history-requests`
     * @param id The ID of the datastore entry.
     * @param rev Specific revision to read. Defaults to
     * latest revision.
     * @returns Promise resolved to a new `_rev` property of deleted
     * object.
     */
    remove(type: String|null, id: String|null, rev: String|null): Promise<any>|null;

    /**
     * Reverts deleted items.
     * This function fires `request-object-changed` event for each restored
     * request.
     *
     * @param type Request type: `saved-requests` or `history-requests`
     * @param items List of request objects. Required properties are
     * `_id` and `_rev`.
     * @returns Resolved promise with restored objects. Objects have
     * updated `_rev` property.
     */
    revertRemove(type: String|null, items: any[]|null): Promise<any>|null;

    /**
     * Finds last not deleted revision of a document.
     *
     * @param db PouchDB instance
     * @param items List of documents to process
     * @returns Last not deleted version of each document.
     */
    _findNotDeleted(db: object|null, items: any[]|null): Promise<any[]|null>;

    /**
     * Finds a next revision after the `deletedRevision` in the revisions history
     * which is the one that reverts any changes made after it.
     *
     * @param revs PouchDB revision history object
     * @param deletedRevision Revision of deleted object (after delete).
     * @returns Revision ID of the object before a change registered in
     * `deletedRevision`
     */
    _findUndeletedRevision(revs: object|null, deletedRevision: object|null): String|null;

    /**
     * Handler for request read event request.
     */
    _handleRead(e: CustomEvent|null): void;

    /**
     * Handles onject save / update
     */
    _handleObjectSave(e: CustomEvent|null): void;

    /**
     * Deletes the object from the datastore.
     */
    _handleObjectDelete(e: CustomEvent|null): void;

    /**
     * Queries for a list of projects.
     */
    _handleObjectsDelete(e: CustomEvent|null): void;

    /**
     * handlers `request-objects-undeleted` event to restore deleted items
     */
    _handleUndelete(e: CustomEvent|null): void;

    /**
     * Filters query results to return only successfuly read data.
     *
     * @param result PouchDB query result
     * @returns List of request that has been read.
     */
    _filterExistingItems(result: object|null): any[]|null;

    /**
     * Finds a `_rev` for a doc.
     *
     * @param docs List of PouchDB documents to search for `_rev`
     * @param id Document ID
     * @returns Associated `_rev`
     */
    _findOldRef(docs: any[]|null, id: String|null): String|null;

    /**
     * Saves the request on Google Drive.
     * It sends `drive-request-save` event to call a component responsible
     * for saving the request.
     *
     * This do nothing if `opts.drive is not set.`
     *
     * @param data Data to save
     * @param opts Save request options. See `saveRequest` for more info.
     * @returns Resolved promise to updated object.
     */
    _saveGoogleDrive(data: object|null, opts: object|null): Promise<any>|null;

    /**
     * Updates or creates request search index used when querying for request
     * data.
     *
     * This operation is async and in a web worker (separate thred).
     *
     * @param request A request to index.
     */
    _indexRequest(request: object|null): void;

    /**
     * Removed URL index data when the request is deleted.
     *
     * @param id Request IDs to delete.
     */
    _deleteIndex(id: String|null): void;
    _clearIndexedData(): void;

    /**
     * Creates if nescesary and returns indexing web worker.
     *
     * @returns An indexing web worker instance.
     */
    _getIndexWorker(): Worker|null;

    /**
     * Terminates the worker (if exists) and removes event listeners
     */
    _unregisterWorker(): void;

    /**
     * A handler for data returned from the request indexing worker.
     *
     * @param e Worker event
     */
    _onIndexWorkerData(e: Event|null): void;

    /**
     * A handler for error returned from the request indexing worker.
     *
     * @param e Worker event
     */
    _onIndexWorkerError(e: Event|null): void;

    /**
     * A handler for the `request-query` custom event. Queries the datastore for
     * request data.
     * The event must have `q` property set on the detail object.
     */
    _handleQuery(e: CustomEvent|null): void;

    /**
     * Performs a query on the URL index data.
     *
     * @param q User query
     * @param type Optional, type of the requests to search for.
     * By default it returns all data.
     * @param detailed If set it uses slower algorithm but performs full
     * search on the index. When false it only uses filer like query + '*'.
     * @returns Promise resolved to the list of requests.
     */
    queryUrlData(q: String|null, type: String|null, detailed: Boolean|null): Promise<Array<object|null>|null>;

    /**
     * Handler for URL index results search.
     *
     * @param id The ID sent to the web worker to identify callback
     * function.
     * @param results Map of request id - request type.
     */
    _urlQueryHandler(id: String|null, results: object|null): Promise<any>|null;

    /**
     * Performs a query on the request data store.
     * It uses PouchDB `query` function on built indexes.
     * Note, it does not query URL data.
     *
     * @param q User query
     * @param type Optional, type of the requests to search for.
     * By default it returns all data for both history and saved.
     * @param ignore List of IDs to ignore.
     * @returns Promise resolved to the list of requests.
     */
    query(q: String|null, type: String|null, ignore: Array<String|null>|null): Promise<Array<object|null>|null>;

    /**
     * Queries history store using PouchDB quick search plugin (full text search).
     *
     * @param q User query
     * @param ignore List of IDs to ignore.
     * @returns Promise resolved to the list of requests.
     */
    queryHistory(q: String|null, ignore: Array<String|null>|null): Promise<Array<object|null>|null>;

    /**
     * Queries Saved store using PouchDB quick search plugin (full text search).
     *
     * @param q User query
     * @param ignore List of IDs to ignore.
     * @returns Promise resolved to the list of requests.
     */
    querySaved(q: String|null, ignore: Array<String|null>|null): Promise<Array<object|null>|null>;
    _queryStore(q: any, ignore: any, db: any, indexes: any): any;

    /**
     * Performs data index using PouchDB api.
     *
     * @param type Data type - saved or history.
     */
    indexData(type: String|null): Promise<any>|null;

    /**
     * Handler for `request-project-list` event to query for list of requests in
     * a project.
     */
    _listProjectRequestsHandler(e: CustomEvent|null): void;

    /**
     * Reads list of requests associated with a project
     *
     * @param id Project id
     * @param opts Additional options. Currently only `restorePayload`
     * is supported
     */
    readProjectRequests(id: String|null, opts: object|null): Promise<any>|null;

    /**
     * Reads requests data related to the project from a legacy system.
     *
     * @param id Project id
     */
    readProjectRequestsLegacy(id: String|null): Promise<any>|null;

    /**
     * Sorts requests list by `projectOrder` property
     */
    sortRequestProjectOrder(a: object|null, b: object|null): Number|null;
  }
}

interface HTMLElementTagNameMap {
  "request-model": LogicElements.RequestModel;
}
