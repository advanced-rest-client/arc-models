/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   rest-api-model.html
 */

/// <reference path="base-model.d.ts" />

declare namespace LogicElements {

  /**
   * Events based access to REST APIs datastore.
   *
   * Note: **All events must be cancelable.** When the event is cancelled by an instance
   * of the element it won't be handled again by other instance that possibly exists
   * in the DOM.
   *
   * `rest-api-index-updated`, `rest-api-data-updated` and `rest-api-deleted` events
   * are cancelable if a view requested to alter the data in the datastore. Only
   * models should handle cancelable events. This element fires an event with the same
   * type but non-cancelable when the operation has been commited to the datastore
   * and view shouls handle non-cancelable event to update their state.
   *
   * ## Index and data object
   *
   * RAML can be a large object therefore iterating over each record when listing
   * or searching for APIs would not be efficient. This model creates separate object in
   * different data stores to keep listing (index) data separately from RAML data.
   * In most cases application should operate on index data. API data should be
   * read directly using record's data store ID which is the same as index id.
   *
   * Index object contains following properties:
   *
   * - `_id` `{String}` - The same ID as API data record ID
   * - `title` `{String}` - API title
   * - `version` `{String}` - API version number / string
   * - `baseUri` `{String}` - API base URI
   * - `order` `{Number}` - Order on the list. By default it's `0`
   * - `description` `{?String}` - API description. Can be undefined.
   *
   * ## Events API
   *
   * ### Create
   *
   * Creates bothe api data and api index objects.
   *
   * To create data fire cancelable `rest-api-create` with the raml data in
   * detail object
   *
   * ```javascript
   * let event = new CustomEvent('rest-api-create', {
   *    detail: {
   *      raml: {...}
   *    },
   *    bubbles: true,
   *    cancelable: true
   * });
   * document.body.dispatchEvent(event);
   * console.log(event.defaultPrevented);
   * // prints "true"
   *
   * event.detail.result(indexDoc => {
   *    console.log(indexDoc);
   *    // prints content of the index object
   * });
   * ```
   *
   * Optional property for create event is `order` which is used to order
   * elements on the list.
   *
   * ### Read
   *
   * Reads API data object form the datastore.
   *
   * To access data fire cancelable `rest-api-read` with the ID in detail object
   *
   * ```javascript
   * let event = new CustomEvent('rest-api-read', {
   *    detail: {
   *      id: "api-datastore-id"
   *    },
   *    bubbles: true,
   *    cancelable: true
   * });
   * document.body.dispatchEvent(event);
   * console.log(event.defaultPrevented);
   * // prints "true"
   *
   * event.detail.result(dataDoc => {
   *    console.log(dataDoc.raml);
   *    // prints API data
   * });
   * ```
   *
   * ### Update index
   *
   * Updates API index object in the datastore.
   *
   * To update index data fire cancelable `rest-api-index-updated` with the
   * PouchDB document in `detail` object
   *
   * ```javascript
   * let event = new CustomEvent('rest-api-index-updated', {
   *    detail: {
   *      doc: {_id: ...}
   *    },
   *    bubbles: true,
   *    cancelable: true
   * });
   * document.body.dispatchEvent(event);
   * console.log(event.defaultPrevented);
   * // prints "true"
   *
   * event.detail.result(doc => {
   *    console.log(doc);
   *    // prints upadated document
   * });
   * ```
   *
   * ### Update API data
   *
   * Updates API data object in the datastore.
   *
   * To update API data fire cancelable `rest-api-data-updated` with the PouchDB
   * document in `detail` object
   *
   * ```javascript
   * let event = new CustomEvent('rest-api-data-updated', {
   *    detail: {
   *      doc: {_id: ...}
   *    },
   *    bubbles: true,
   *    cancelable: true
   * });
   * document.body.dispatchEvent(event);
   * console.log(event.defaultPrevented);
   * // prints "true"
   *
   * event.detail.result(doc => {
   *    console.log(doc);
   *    // prints upadated document
   * });
   * ```
   *
   * ### Delete
   *
   * Deletes API index and API data object from the datastore.
   *
   * To remove API data fire cancelable `rest-api-deleted` with the id of the
   * document in `detail` object
   *
   * ```javascript
   * let event = new CustomEvent('rest-api-deleted', {
   *    detail: {
   *      id: "datastore-id"
   *    },
   *    bubbles: true,
   *    cancelable: true
   * });
   * document.body.dispatchEvent(event);
   * console.log(event.defaultPrevented);
   * // prints "true"
   *
   * event.detail.result(() => {
   *     // Documents has been deleted
   * });
   * ```
   *
   * Note, delete operation marks object as deleted. It doesn't actually remove
   * the data from the datastore. If needed data can be restored as described in
   * PouchDB documentation.
   *
   * ### Update index data in batch
   *
   * The same as create event but allows to update many index objects in one request.
   * This is faster than making series of individual requests.
   *
   * ```javascript
   * let event = new CustomEvent('rest-api-index-updated-batch', {
   *    detail: {
   *      docs: [{_id: ...]}
   *    },
   *    bubbles: true,
   *    cancelable: true
   * });
   * document.body.dispatchEvent(event);
   * console.log(event.defaultPrevented);
   * // prints "true"
   *
   * event.detail.result(updated => {
   *    console.log(updated);
   *    // Array of updated documents
   * });
   * ```
   *
   * ### List index data
   *
   * List a page of index object. Each page contains a 100 of results.
   * It supports pagination using `nextPageToken` property returned with each call to this API.
   *
   * Result object contains `nextPageToken` that should be used to pass to next
   * request to receive next page of results. Index listing data are in `items` property.
   *
   * ```javascript
   *
   * var nextPageToken;
   * function queryPage() {
   *    var detail = {};
   *    if (nextPageToken) {
   *      detail.nextPageToken = nextPageToken;
   *    }
   *    let event = new CustomEvent('rest-api-index-list', {
   *      detail: detail,
   *      bubbles: true,
   *      cancelable: true
   *    });
   *    document.body.dispatchEvent(event);
   *
   *    return event.detail.result
   *    .then(result => {
   *      nextPageToken = result.nextPageToken;
   *      return result.items;
   *    });
   * }
   * ```
   */
  class RestApiModel extends Polymer.Element {

    /**
     * A handler to the datastroe contains listing data
     *    
     */
    readonly indexDb: any;

    /**
     * A handler to the datastore containing REST API data
     * (raml definition).
     *    
     */
    readonly dataDb: any;

    /**
     * Cached query options for index data listing.
     * Keys is the nextPageToken returned with listing response. If the
     * page token has been used with the query it will takes this data
     * to return next page results.
     */
    _cachedQueryOptions: object|null|undefined;

    /**
     * Database query options for pagination.
     * Override this value to change the query options like limit of the results in one call.
     *
     * This is query options passed to the PouchDB `allDocs` function. Note that it will not
     * set `include_docs` option. A conviniet shortcut is to set the the `includeDocs` property
     * and the directive will be added automatically.
     */
    readonly defaultQueryOptions: object|null|undefined;
    _attachListeners(node: any): void;
    _detachListeners(node: any): void;

    /**
     * Reads an entry from the index datastore.
     *
     * @param id The ID of the datastore entry.
     * @param rev Specific revision to read. Defaults to latest revision.
     * @returns Promise resolved to a project object.
     */
    readIndex(id: String|null, rev: String|null): Promise<any>|null;

    /**
     * Reads an entry from the raml data datastore.
     *
     * @param id The ID of the datastore entry.
     * @param rev Specific revision to read. Defaults to latest revision.
     * @returns Promise resolved to a project object.
     */
    readData(id: String|null, rev: String|null): Promise<any>|null;

    /**
     * Creates / updates API data object.
     * The `_id` property must be already set on the object.
     *
     * This function fires `rest-api-data-updated` custom event on success.
     *
     * @param doc PouchDB document.
     * @returns Resolved promise to a document with updated `_rev`
     */
    updateData(doc: object|null): Promise<any>|null;

    /**
     * Creates / updates API index object.
     * The `_id` property must be already set on the object.
     *
     * This function fires `rest-api-index-updated` custom event on success.
     *
     * @param doc PouchDB document.
     * @returns Resolved promise to a document with updated `_rev`
     */
    updateIndex(doc: object|null): Promise<any>|null;

    /**
     * Updates many index objects in one request.
     *
     * @param docs List of PouchDB documents to update.
     * @returns Resolved promise to a list of document with updated `_rev`
     */
    updateIndexBatch(docs: Array<object|null>|null): Promise<any>|null;

    /**
     * Removes data from index and raml data datastores.
     *
     * @param id Datastore entry ID to delete. Both data and index objects
     * shares the same ID.
     * @returns Promise resolved to a new `_rev` property of deleted object.
     */
    remove(id: String|null): Promise<any>|null;

    /**
     * Creates datastores entries for REST API.
     * It creates data object and index object used for listings.
     *
     * @param raml A RAML data to insert
     * @param order Optional, creates a datastore entry with given order.
     * @returns A promise resolved when the datastore objects are created.
     * Resolved promise contains index object.
     */
    create(raml: object|null, order: Number|null): Promise<any>|null;

    /**
     * Lists index data.
     *
     * ### QueryResultObject
     * - `data` {Array<Object>} List of PouchDB documents read from the datastore
     * - `nextPageToken` {String} Pagination string to be used with next call
     * to get resutls for a next page. The nextPageToken don't change over
     * subsequent requests.
     *
     * @param opts Query options:
     * - nextPageToken {String} Received from previous query page token.
     * @returns A promise resolved to a query result object on success.
     */
    listIndex(opts: object|null): Promise<any>|null;

    /**
     * Generates `nextPageToken` as a random string.
     *
     * @returns Random 32 characters long string.
     */
    _makeNextPageToken(): String|null;

    /**
     * A handler for `rest-api-create` custom event.
     * It only handles event's that hasn't been cancelled.
     *
     * Required detail property is `raml` with the RAML data to insert.
     * Optional property is `order` that describes order on the list.
     *
     * It sets a `result` property on the event `detail` object that is a
     * promise returned by `create()` function.
     */
    _createHandler(e: any): void;

    /**
     * Handler for the `rest-api-read` custom event.
     * It only handles event's that hasn't been cancelled.
     *
     * Event `detail` object must contain the `id` property with datastore entry
     * id and may contain a `rev` property to read a specific revision.
     *
     * It sets a `result` property on the event `detail` object that is a
     * promise returned by `readData()` function.
     */
    _readHandler(e: any): void;

    /**
     * A handler for the `rest-api-index-updated` custom event.
     * It is only handled if the event in cancelable and not cancelled.
     *
     * Updates index object in the datastore and sets `result` property on the
     * event detail object with a result of calling `updateIndex()` function.
     */
    _indexUpdatedHandler(e: any): void;

    /**
     * A handler for the `rest-api-data-updated` custom event.
     * It is only handled if the event in cancelable and not cancelled.
     *
     * Updates RAML data object in the datastore and sets `result` property on the
     * event detail object with a result of calling `updateData()` function.
     */
    _dataUpdatedHandler(e: any): void;

    /**
     * Deletes the object from the datastores.
     * It is only handled if the event in cancelable and not cancelled.
     *
     * Event has to have `id` property set on the detail object.
     *
     * It sets `result` property on the event detail object with a result of
     * calling `remove()` function.
     */
    _deletedHandler(e: any): void;

    /**
     * Handler for the `rest-api-index-updated-batch` custom event.
     * It requires to have `docs` property set to event detail as an array of
     * PouchDB documents to update.
     *
     * It sets `result` property on the event detail object with a result of
     * calling `updateIndexBatch()` function.
     */
    _indexesUpdatedHandler(e: any): void;

    /**
     * Handler for the `rest-api-index-list` custom event.
     *
     * The `detail` object can contain `nextPageToken` property used for pagination.
     *
     * It sets `result` property on the event detail object with a result of
     * calling `listIndex()` function.
     */
    _indexListHandler(e: any): void;

    /**
     * Prepares PouchDB data object to store in the datastore.
     *
     * @returns Datastore object
     */
    _prepareStoreObject(raml: any): object|null;

    /**
     * Prepares index data store object for the REST API.
     *
     * @param storeObject A store object with RAML data
     * @param order Optional, creates a datastore entry with given order.
     * @returns Index store object.
     */
    _prepareIndexObject(storeObject: object|null, order: Number|null): object|null;
  }
}

interface HTMLElementTagNameMap {
  "rest-api-model": LogicElements.RestApiModel;
}
