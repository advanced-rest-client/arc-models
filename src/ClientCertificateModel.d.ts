/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/ClientCertificateModel.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {ArcBaseModel} from './ArcBaseModel.js';

export {ClientCertificateModel};

declare namespace LogicElements {

  /**
   * Events based access to client-certificates data store.
   *
   * Note: **All events must be cancelable.** When the event is cancelled by an instance
   * of the element it won't be handled again by other instance that possibly exists
   * in the DOM.
   *
   * Cancellable event is a request to models for change. Non-cancellable event
   * is a notification for views to update their values.
   * For example `request-object-changed` event notifies model to update object in
   * the datastore if the event is cancelable and to update views if it's not
   * cancellable.
   *
   * Each handled event contains the `result` property on the `detail` object. It
   * contains a `Promise` object with a result of the operation. Also, for update / delete
   * events the same non-cancelable event is fired.
   *
   * Events handled by this element are cancelled and propagation of the event is
   * stopped.
   *
   * The certificates are located in the `client-certificates-data` store.
   * Content is not stored with the listing data for performance.
   *
   * `clientCertificate` struct
   * - `type` {String} - Certificate type. Either p12 or pem. Required.
   * - `cert` {Array<Certificate>} or {Cetrificate} - Certificate or list of certificates to use. Required.
   * - `key` {Array<Certificate>} or {Cetrificate} - Key for pem certificate. Optional.
   * - `name` {String} - Custom name of the certificate. Optional.
   * - `created` {Number} - Timestamp when the certificate was inserted into the data store.
   * Required when returning a result. Auto-generated when inserting.
   *
   * `Certificate` struct
   * - `data` {String} or {ArrayBuffer} or {Buffer} The certificate to use. Required.
   * The p12 type certificate must be a Buffer. The `get()` method always returns
   * original data type.
   * - `passphrase` {String} - A passphrase to use to unlock the certificate. Optional.
   */
  class ClientCertificateModel extends ArcBaseModel {
    readonly dataDb: object|null;

    /**
     * @param dbname Name of the data store
     * @param revsLimit Limit number of revisions on the data store.
     */
    constructor(dbname: String|null, revsLimit: Number|null);
    _attachListeners(node: any): void;
    _detachListeners(node: any): void;

    /**
     * Override's delete model function to include the "data" store.
     */
    deleteModel(): Promise<any>|null;

    /**
     * Lists certificates installed in the application.
     *
     * Note, pagination is not enabled for this store. By calling this function
     * it returns all certificates from the database.
     *
     * The list data only contain certificate's meta data. Certificate's content
     * and password is kept in different store.
     */
    list(): Promise<any>|null;

    /**
     * Reads clioent certificate full structure.
     * Returns certificate's meta data + cert + key.
     *
     * @param id Certificate's datastore id.
     * @returns Promise resolved to a certificate object.
     */
    get(id: String|null): Promise<any>|null;

    /**
     * Safely deletes certificate data from the data store.
     * It marks the certificate as deleted so DB apis won't use this data but
     * it is possible to restore the data in case of accidental delete.
     *
     * Note, this data always stays only on the user's machine so there's no
     * conflict with GDPR.
     *
     * @param id Certificate's datastore id.
     * @returns Promise resolved when both entries are deleted.
     */
    delete(id: String|null): Promise<any>|null;

    /**
     * Inserts new client certificate object.
     * See class description for data structure.
     *
     * @param data Data to insert.
     * @returns Unlike other models, rromise resolved to inserted
     * id. Because this API operates on a single ID without reviews this won't
     * return the final object.
     */
    insert(data: object|null): Promise<any>|null;

    /**
     * Prepares certificate object to be stored in the data store.
     * If the `data` property is not string then it assumes buffer (either
     * Node's or ArrayBuffer). In this case it converts buffer to base64 string.
     * It also adds `type` property set to `buffer` for the `certificateFromStore()`
     * function to recognize what to do with the data.
     *
     * Note, for optimization, PEM keys should be strings as the content of the
     * certificate is already a base62 string. To spare dounble base64 convertion
     * use string data.
     *
     * @param cert Certificate definition. See class description.
     */
    certificateToStore(cert: object|null): object|null;

    /**
     * Restores certificate object to it's original values after reading it from
     * the data store.
     *
     * @param cert Restored certificate definition.
     */
    certificateFromStore(cert: object|null): object|null;

    /**
     * Converts incomming data to base64 string.
     *
     * @returns Safe to store string.
     */
    bufferToBase64(ab: ArrayBuffer|Buffer|null): String|null;

    /**
     * Converts base64 string to Uint8Array.
     *
     * @returns Restored array view.
     */
    base64ToBuffer(str: String|null): Uint8Array|null;
    _listHandler(e: any): void;
    _getHandler(e: any): void;
    _deleteHandler(e: any): void;
    _insertHandler(e: any): void;
  }
}
